<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Coroutine,Generator,Async与Await]]></title>
      <url>http://blog.ddlee.cn/2017/04/03/Coroutine-Generator-Async%E4%B8%8EAwait/</url>
      <content type="html"><![CDATA[<h4 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h4><p>Generator能保存自己的状态，进入一种“Paused”状态，再次调用时会继续执行。</p>
<p>Generator的好处之一是节省了存储空间开销，带一些”流处理”的思想。</p>
<p>其实，我们也可以对Generator进行传入数据的操作：</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">coro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    hello <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">"Hello"</span>
    <span class="token keyword">yield</span> hello

c <span class="token operator">=</span> coro<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="Coroutine"><a href="#Coroutine" class="headerlink" title="Coroutine"></a>Coroutine</h4><p>coroutine可以认为是generator思想的泛化：</p>
<ul>
<li>generator一个一个地吐出数据（返回值）</li>
<li>coroutine一个一个地吃掉数据（传入参数）并返回结果，即可控地执行函数</li>
</ul>
<p>关键点在于，generator与coroutine都能保存自己的状态，而这种特点正可以用于任务切换。yield可以看做是操作系统在进行进程管理时的traps:</p>
<p><img src="/img/coroutine/os.png" alt="traps"></p>
<p>实际上，coroutine可以看做”用户自定义”的进程，状态、启用和暂停都可控，David Beazley就利用这一点用coroutine实现了Python上的操作系统（参见Reference)。</p>
<h4 id="Conroutine与Concurrent-Programming"><a href="#Conroutine与Concurrent-Programming" class="headerlink" title="Conroutine与Concurrent Programming"></a>Conroutine与Concurrent Programming</h4><p>Concurrent Programming中有Task的概念，有如下特点：</p>
<ul>
<li>独立的控制流</li>
<li>内部状态变量</li>
<li>支持计划任务（暂停、恢复执行）</li>
<li>与其他Task通信</li>
</ul>
<pre class=" language-python"><code class="language-python">@coroutine
<span class="token keyword">def</span> <span class="token function">grep</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#正则匹配</span>
    <span class="token keyword">print</span> <span class="token string">"Looking for %s"</span> <span class="token operator">%</span> pattern    
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        line <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> pattern <span class="token keyword">in</span> line<span class="token punctuation">:</span>
            <span class="token keyword">print</span> line<span class="token punctuation">,</span>
</code></pre>
<p>conroutine有自己的控制流（while/if），有局部变量（pattern, line），能暂停和恢复（yield()/send()），能相互通信（send()）</p>
<p>====》coroutine就是一种Task！</p>
<p>Python Docs中提供了一个例子：</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> asyncio

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">compute</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Compute %s + %s ..."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">print_sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> <span class="token keyword">await</span> compute<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s + %s = %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span>

loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>print_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>执行方式如下图：</p>
<p><img src="/img/coroutine/tulip_coro.png" alt="Chaining coroutines"></p>
<p>利用coroutine，可以在一个线程(Task)上实现异步。</p>
<h4 id="Impletation"><a href="#Impletation" class="headerlink" title="Impletation"></a>Impletation</h4><p>coroutine有两种实现方式，基于generator和原生async, awati关键字。</p>
<h5 id="generator-based-coroutine"><a href="#generator-based-coroutine" class="headerlink" title="generator based coroutine"></a>generator based coroutine</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> datetime
<span class="token keyword">import</span> random

@asyncio<span class="token punctuation">.</span>coroutine
<span class="token keyword">def</span> <span class="token function">display_date</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> loop<span class="token punctuation">)</span><span class="token punctuation">:</span>
    end_time <span class="token operator">=</span> loop<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">50.0</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Loop: {} Time: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loop<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token operator">>=</span> end_time<span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        <span class="token keyword">yield</span> <span class="token keyword">from</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>display_date<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> loop<span class="token punctuation">)</span><span class="token punctuation">)</span>
asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>display_date<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> loop<span class="token punctuation">)</span><span class="token punctuation">)</span>

loop<span class="token punctuation">.</span>run_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>上面的程序实现了在同一个线程里交互执行两个函数（sleep），而又能保持各自的状态</p>
<h5 id="Native-support-python-3-5"><a href="#Native-support-python-3-5" class="headerlink" title="Native support(python 3.5+)"></a>Native support(python 3.5+)</h5><p>只需要修改函数定义头和<code>yield from</code>为关键字<code>await</code>即可。</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">display_date</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> loop<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>
    end_time <span class="token operator">=</span> loop<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">50.0</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Loop: {} Time: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loop<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token operator">>=</span> end_time<span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h4><p>Coroutine常翻译成“协程”。</p>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h4><ul>
<li><a href="http://www.dabeaz.com/coroutines/Coroutines.pdf" target="_blank" rel="external">David Beazley @ PyCon2009 Slides</a></li>
<li><a href="http://masnun.com/2015/11/13/python-generators-coroutines-native-coroutines-and-async-await.html" target="_blank" rel="external">PYTHON: GENERATORS, COROUTINES, NATIVE COROUTINES AND ASYNC/AWAIT</a></li>
<li><a href="https://docs.python.org/3/library/asyncio-task.html" target="_blank" rel="external">Python 3.6 Docs: Taks and coroutines</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Programming </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 异步 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[500lines项目Crawler源码阅读笔记]]></title>
      <url>http://blog.ddlee.cn/2017/04/03/500lines%E9%A1%B9%E7%9B%AECrawler%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>源码来自GitHub上著名的Repo: <a href="https://github.com/aosabook/500lines" target="_blank" rel="external">500lines or less</a>。</p>
<h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><p><img src="/img/500lines_crawler/500lines_crawler.png" alt="structure"></p>
<p>代码结构由crawling, crawl, reporting三大部分组成。</p>
<ul>
<li>crawl: 驱动，解析传入的参数，管理loop，调用crawler，生成report</li>
<li>Crawling: 实现crawler类及一系列辅助函数</li>
<li>reporting： 生成记录</li>
</ul>
<h3 id="Crawler类"><a href="#Crawler类" class="headerlink" title="Crawler类"></a>Crawler类</h3><p>Crawler类实现了解析网址，抓取内容等基本功能，利用<code>asyncio</code>库构建<code>coroutine</code>（parse_lings(), fetch(), work()）。</p>
<p><img src="/img/500lines_crawler/500lines_crawler_class.png" alt="Class Crawler"></p>
<p>核心之处是组织管理异步的抓取任务，代码块结构如下：</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Crawler</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> roots<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> loop<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>q <span class="token operator">=</span> Queue<span class="token punctuation">(</span>loop<span class="token operator">=</span>self<span class="token punctuation">.</span>loop<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 建立队列</span>

  @asyncio<span class="token punctuation">.</span>coroutine
  <span class="token keyword">def</span> <span class="token function">parse_links</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">'''从返回内容中解析出要抓取的链接'''</span>
    body <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token keyword">from</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
      <span class="token keyword">if</span> content_type<span class="token punctuation">:</span>
        text <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token keyword">from</span> response<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>
        urls <span class="token operator">=</span> set<span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>
          <span class="token keyword">if</span> self<span class="token punctuation">.</span>url_allowed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            links<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>
  @asynico<span class="token punctuation">.</span>coroutine
  <span class="token keyword">def</span> <span class="token function">fetch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">'''访问链接，抓取返回结果'''</span>
    <span class="token keyword">while</span> tries<span class="token punctuation">:</span>
      <span class="token keyword">try</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token keyword">from</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
      <span class="token keyword">if</span> is_redirect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
      <span class="token keyword">else</span><span class="token punctuation">:</span>
        links <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token keyword">from</span> self<span class="token punctuation">.</span>parse_links<span class="token punctuation">(</span>response<span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
      <span class="token keyword">yield</span> <span class="token keyword">from</span> response<span class="token punctuation">.</span>releas<span class="token punctuation">(</span><span class="token punctuation">)</span>
  @asyncio<span class="token punctuation">.</span>coroutine
  <span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">'''封装抓取过程，与队列交互'''</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
      <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token keyword">from</span> self<span class="token punctuation">.</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>seen_urls
        <span class="token keyword">yield</span> <span class="token keyword">from</span> self<span class="token punctuation">.</span>fetch<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>q<span class="token punctuation">.</span>task_done<span class="token punctuation">(</span><span class="token punctuation">)</span>
  @asyncio<span class="token punctuation">.</span>coroutine
  <span class="token keyword">def</span> <span class="token function">crawl</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">'''建立Tasks，启动Task'''</span>
    workers <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>Task<span class="token punctuation">(</span>self<span class="token punctuation">.</span>work<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loop<span class="token operator">=</span>self<span class="token punctuation">.</span>loop<span class="token punctuation">)</span>
                <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_tasks<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">yield</span> <span class="token keyword">from</span> self<span class="token punctuation">.</span>q<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>下图是我对上述代码结构的理解：</p>
<p><img src="/img/500lines_crawler/coroutine.JPG" alt="coroutines"></p>
<p>对coroutine的进一步介绍，参见<a href="/2017/04/03/Coroutine-Generator-Async与Await/">Coroutine-Generator-Async与Await</a>。</p>
<h3 id="A-Web-Crawler-With-asyncio-Coroutines导读"><a href="#A-Web-Crawler-With-asyncio-Coroutines导读" class="headerlink" title="A Web Crawler With asyncio Coroutines导读"></a><a href="http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html" target="_blank" rel="external">A Web Crawler With asyncio Coroutines</a>导读</h3><p>文章整体结构：</p>
<ul>
<li>分析爬虫任务</li>
<li><ul>
<li>传统方式：抢锁</li>
</ul>
</li>
<li><ul>
<li>异步方式的特点：无锁；单线程上同时运行多操作</li>
</ul>
</li>
<li>回调函数：fetch(),connecte(),read_response()的实现</li>
<li>Coroutine</li>
<li><ul>
<li>Generator的工作原理</li>
</ul>
</li>
<li><ul>
<li>用Generator实现Coroutine</li>
</ul>
</li>
<li>Asyncio库中的Coroutine</li>
<li><ul>
<li>crawl()</li>
</ul>
</li>
<li><ul>
<li>work()</li>
</ul>
</li>
<li><ul>
<li>fetch(), handle redirections</li>
</ul>
</li>
<li><ul>
<li>Queue()</li>
</ul>
</li>
<li><ul>
<li>EventLoop()</li>
</ul>
</li>
<li><ul>
<li>Task()</li>
</ul>
</li>
<li>Conclusion</li>
</ul>
<p>文章最后，作者点明了主题思想：</p>
<blockquote>
<p>Increasingly often, modern programs are I/O-bound instead of CPU-bound. For such programs, Python threads are the worst of both worlds: the global interpreter lock prevents them from actually executing computations in parallel, and preemptive switching makes them prone to races. Async is often the right pattern. But as callback-based async code grows, it tends to become a dishevelled mess. Coroutines are a tidy alternative. They factor naturally into subroutines, with sane exception handling and stack traces.</p>
</blockquote>
<p>大意是说，对I/O密集型的程序，Python多线程在两方面令人失望：全局锁的设定使之不能真正并行；抢占式多任务处理机制又让多个线程间形成竞争关系。异步通常是正确的选择。但持续增长的回调函数会使代码丧失可读性，Coroutine便是一种保持整洁性的替代方案。</p>
<h4 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h4><p>这样说，Python的多线程效率带来的提高只是Python程序抢占了系统中非Python进程的资源（参考召集一波狐朋狗友帮你抢选修课），多个线程提高了Python作为一个整体在系统资源调配中的竞争力。</p>
]]></content>
      
        <categories>
            
            <category> Programming </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Feedly+Reeder3+FeedMe:信息获取与处理]]></title>
      <url>http://blog.ddlee.cn/2017/04/03/Feedly-Reeder3-FeedMe-%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96%E4%B8%8E%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>我蛮早就意识到自己被信息淹没了。于是关了票圈，屏蔽了空间，不装任何新闻APP，失去效力的微信群一概不留，知乎上的关注也缩减了很多很多。</p>
<blockquote>
<p>世界终于清静了。</p>
</blockquote>
<p>但仍然需要有关注的动向。我又捡起了RSS这个老朋友，建立起的信息获取跟处理流如下图：</p>
<p><img src="/img/Feedly_Reeder/Feedly+Reeder.png" alt="Feedly+Reeder3"></p>
<h3 id="服务与APP"><a href="#服务与APP" class="headerlink" title="服务与APP"></a>服务与APP</h3><p>主要涉及的服务：Feedly（免费，有高级版）</p>
<p>IOS APP：</p>
<ul>
<li>Reeder3（￥30）</li>
<li>Pocket（免费）</li>
<li>Pushbullet（免费）</li>
<li>Evernote（免费版限制客户端个数）</li>
</ul>
<p>Android APP:</p>
<ul>
<li>FeedMe（免费）</li>
<li>Pocket</li>
<li>Inbox</li>
<li>Evernote</li>
<li>Google Keep</li>
</ul>
<h3 id="获取：Feedly整合"><a href="#获取：Feedly整合" class="headerlink" title="获取：Feedly整合"></a>获取：Feedly整合</h3><p><a href="https://feedly.com/i/welcome" target="_blank" rel="external">Feedly</a>是著名的信息聚合服务，能从媒体RSS、博客、YouTube Chanel等拉取文章/动态，还提供Google关键词动态提醒服务。</p>
<p>这里先推荐两个Chrome插件，可以更方便地将网页端想要订阅的信息整合到Feedly中。</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/save-to-feedly-board/hdhblphcdjcicefneapkhmleapfaocih?hl=en-US" target="_blank" rel="external">Follow Feed</a>: 识别跟当前网页内容相关的信息源，添加到Feedly订阅中。</li>
<li><a href="https://chrome.google.com/webstore/detail/save-to-feedly-board/hdhblphcdjcicefneapkhmleapfaocih?hl=en-US" target="_blank" rel="external">Save to Feedly Board</a>: 将当前网页添加到Feedly Board中，可以标记后分享给团队，实时更新。</li>
</ul>
<h4 id="信息源"><a href="#信息源" class="headerlink" title="信息源"></a>信息源</h4><h5 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h5><p>先直接在Feedly中搜索公众号，若找不到订阅源，则可通过<a href="http://www.iwgc.cn/" target="_blank" rel="external">微广场</a>等服务转成RSS。</p>
<h5 id="媒体-博客RSS源"><a href="#媒体-博客RSS源" class="headerlink" title="媒体/博客RSS源"></a>媒体/博客RSS源</h5><p>很多在线媒体会在主页提供RSS地址，也可直接在Feedly中搜索媒体名。</p>
<h5 id="知乎专栏"><a href="#知乎专栏" class="headerlink" title="知乎专栏"></a>知乎专栏</h5><p>有些<a href="https://rss.lilydjwg.me/" target="_blank" rel="external">工具</a>可以将知乎专栏转成RSS订阅源。</p>
<h5 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h5><p>Feedly支持设置关键词动态提醒。</p>
<h3 id="处理：Reeder3-FeedMe"><a href="#处理：Reeder3-FeedMe" class="headerlink" title="处理：Reeder3 + FeedMe"></a>处理：Reeder3 + FeedMe</h3><p>支持Feedly的APP实在太多，<a href="https://feedly.com/apps.html" target="_blank" rel="external">这里</a>是官方给出的列表，可看脸挑选。</p>
<p>我平常同时用Android和IOS处理订阅的信息，大屏精读，小屏浏览。</p>
<h4 id="IOS-Reeder3"><a href="#IOS-Reeder3" class="headerlink" title="IOS: Reeder3"></a>IOS: Reeder3</h4><p>不幸的是Reeder3是要付费的， 30块，几乎没有降过价。</p>
<p>替代品可以考虑自家的Feedly，Ziner等，可以参考<a href="http://www.makeuseof.com/tag/5-best-ipad-rss-readers/" target="_blank" rel="external">这篇文章</a>对比的结果选择。</p>
<h4 id="Android-FeedMe"><a href="#Android-FeedMe" class="headerlink" title="Android: FeedMe"></a>Android: FeedMe</h4><p>这里强推FeedMe(<a href="https://play.google.com/store/apps/details?id=com.seazon.feedme&amp;hl=en" target="_blank" rel="external">Google Play</a>)，抓取、缓存迅速，界面简洁，还有“中国大陆”模式。</p>
<h3 id="消化：Pocket-Inbox-Evernote-Keep"><a href="#消化：Pocket-Inbox-Evernote-Keep" class="headerlink" title="消化：Pocket, Inbox, Evernote/Keep"></a>消化：Pocket, Inbox, Evernote/Keep</h3><p>我个人将信息处理的结果分为三类：</p>
<ul>
<li>Read Later: 没消化</li>
<li>Links to save: 还想接着吃</li>
<li>Favorite:　想学着做</li>
</ul>
<p>稍后再读用Pocket，接口丰富，功能专一（尽管也有了“发现”模块）。</p>
<p>文章中挂的一些外链，移动端不好处理，要发往PC，手机端存在Inbox中，当临时的标签栏，iPad端用Pushbullet发给Chrome，下次打开Chrome时浏览处理。</p>
<p>收藏的文章存到Evernote，打好tags，长篇干货/可反复参考的转到OneNote。</p>
<h3 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h3><p>其他情境下遇到的好文章、信息等尽量文字存到Google Keep，链接存到Inbox，或者给自己写封邮件。</p>
<p>微信的Favorite尽量不用，收藏的目的就在于情景分离，在不同的上下文中，我门信息获取的效率和质量区别实在太大了。详情参考拉微信群异地参加美赛的战友们。</p>
<p>最后推荐几个不错的订阅源(右击复制链接)：</p>
<ul>
<li><a href="http://www.sbnation.com/authors/mike-prada/rss" target="_blank" rel="external">SBNation上Mike Prada的文章</a>: 对NBA比赛、球队战术的分析</li>
<li><a href="http://rsarxiv.github.io/atom.xml" target="_blank" rel="external">Paper Weekly</a>: 机器学习方面的论文解读</li>
<li><a href="http://cos.name/feed/" target="_blank" rel="external">统计之都</a>: 统计学及应用、R语言方面的优秀内容</li>
<li><a href="http://github-trends.ryotarai.info/rss/github_trends_all_weekly.rss" target="_blank" rel="external">GitHub Trends</a></li>
<li><a href="https://blog.ddlee.cn/atom.xml">blog.ddlee.cn</a>: 大言不惭 -_-！</li>
</ul>
<p>@<a href="https://ddlee.cn" target="_blank" rel="external">ddlee</a></p>
]]></content>
      
        <categories>
            
            <category> Individual Management </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Individual Management </tag>
            
            <tag> RSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网站迁移小记：腾讯云+Debian+Vestacp]]></title>
      <url>http://blog.ddlee.cn/2017/04/02/%E7%BD%91%E7%AB%99%E8%BF%81%E7%A7%BB%E5%B0%8F%E8%AE%B0%EF%BC%9A%E8%85%BE%E8%AE%AF%E4%BA%91-Debian-Vestacp/</url>
      <content type="html"><![CDATA[<p>先贴一张文章大纲。</p>
<p><img src="/img/Website-Migeration/structure.png" alt="structure"></p>
<p>这是一个樱花开得正好但我很蛋疼的下午。</p>
<p>中午抢到了腾讯的校园优惠，便打算把网站<code>ddlee.cn</code>迁到国内的服务器上来。</p>
<h3 id="密码管理"><a href="#密码管理" class="headerlink" title="密码管理"></a>密码管理</h3><p>先谈密码管理。</p>
<p>建站会涉及设置很多密码，之前明文保存在云笔记里的方案总觉得又土又笨，何况很多密码最好要随机生成，密码管理服务还是必要的。</p>
<p>搜索之后，我选择的是<a href="https://www.lastpass.com/2" target="_blank" rel="external">lastPass</a>。主要考虑了免费和跨平台的特性。有更高要求的建议选择付费的<a href="https://1password.com/" target="_blank" rel="external">1Password</a>。</p>
<p>需要安装Chrome插件和Ubuntu下的deb包，添加Secure Note的功能深得我心，也支持自定义模板。</p>
<h3 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h3><p>腾讯云的校园优惠力度很大。阿里云是9.9块/月，腾讯用完券1块/月。</p>
<p>这里多讲一句，学生真是幸福得不得了。GitHub Education Pack中既有有Digital Ocean的优惠，AWS也有150刀的礼品卡，Jetbeans大部分产品免费……这还不提学校里买的License。</p>
<p>腾讯的主机1核CPU，2G内存，20G系统盘（Linux），挂个网站还算够用。</p>
<h4 id="SSH-Key-配置"><a href="#SSH-Key-配置" class="headerlink" title="SSH Key 配置"></a>SSH Key 配置</h4><p>建议在配置主机前创建一个SSH Key，这样访问起来安全又省心。</p>
<p>Linux系统下，在<code>~/.ssh/</code>下新建<code>config</code>，写入如下类似内容：</p>
<pre><code>Host Name
  HostName Host_IP
  User root
  IdentityFile path/to/ssh_private_key
</code></pre><p>这样就可以通过命令<code>ssh Name</code>直接访问主机。</p>
<h4 id="系统选择"><a href="#系统选择" class="headerlink" title="系统选择"></a>系统选择</h4><p>建议选择Linux主机。具体哪一系可自行选择，我的选择是Debian，CentOS也是个不错的选择。</p>
<h4 id="安全组设置"><a href="#安全组设置" class="headerlink" title="安全组设置"></a>安全组设置</h4><p>建议先只开启用于SSH的22端口，之后再开HTTP访问的80端口，FTP的20,21端口和主机面板所用端口。</p>
<p>如果个人有代理服务器的话，也可以限制一下来源IP，这样可以通过登入代理服务器，在代理服务器上通过SSH登入WEB主机，需要迁移下SSH Private Key，可以通过命令<code>scp usr1@host1:/path1 usr2@host2:/path2</code>实现。</p>
<h4 id="网络环境"><a href="#网络环境" class="headerlink" title="网络环境"></a>网络环境</h4><p>LNMP和LAMP是两种流行的结构。可以分别安装，再配置相应的<code>config</code>，也可以搜索得到很多一键安装脚本。另一种方案是用Docker部署。</p>
<p>我懒而笨，选择的是用主机面板一键安装。</p>
<h4 id="主机面板"><a href="#主机面板" class="headerlink" title="主机面板"></a>主机面板</h4><p>在此之前，一直用的是AMH的免费4.2版本，简洁轻巧，功能也够用。付费版推出后，免费版遭到冷落，几乎没有更新，这如何能忍。</p>
<p>说起主机面板，我的启蒙是WDCP，其远古风格的UI仍历历在目，后来听说爆出漏洞，但那时我已转战AMH。</p>
<p>一番艰苦卓绝的搜索之后（其实就是检索了’best host control pannel’），我选择了<a href="https://vestacp.com/" target="_blank" rel="external">Vestacp</a>。</p>
<p>UI漂亮，功能不缺（建站，MAIL，备份），GitHub还算活跃，就决定是你了。</p>
<p>缺点是文件管理器收费，不能通过WEB管理文件。安装过程持续蛮久（半个小时，当然也包括了新主机系统包更新的时间）。</p>
<p>安装时注意Hostname填写IP或者已经配置好DNS解析的域名（如<code>admin.ddlee.cn</code>）。8083是管理面板的端口，记得在主机提供商的安全组里开放一下。</p>
<h5 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h5><p>Vestacp支持多人管理，User身份由Package定义，安装过程会自动新建admin，拥有最高权限。</p>
<p>在User的设置里，可以配置用户的Package，而Package的设置里，可以配置每一用户身份的建站模板，资源上限等。如图。</p>
<p><img src="/img/Website-Migeration/Package.png" alt="Package"></p>
<p>建站相当容易，注意在高级选项里添加FTP账户，用于之后上传HTML文件。</p>
<h5 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h5><p>建站完成后，记得配置好DNS解析，开放20和21端口，就可以用FileZilla测试链接。</p>
<p>注意，在高级选项里配置好Default local directory，设置Default remote directory为<code>/public_html</code>，并启用synchronized browsing和directory comparison，以后的FTP生活会很幸福。</p>
<h5 id="Mail"><a href="#Mail" class="headerlink" title="Mail"></a>Mail</h5><p>若在建站时勾选了Mail support，可以建立个性化的邮箱名，可以设置自动回复/转发，也可以用Gmail托管。以后留邮箱的时候可以短短的了呢。</p>
<h5 id="配置SSL"><a href="#配置SSL" class="headerlink" title="配置SSL"></a>配置SSL</h5><p>这是无意发现的技能。</p>
<p>本来在我的印象里，SSL证书都是要收费的。但留心的朋友可能注意到，建站时SSL support下有Lets Encrypt Support。这一服务可以用上免费的SSL。</p>
<p>官网：<a href="https://letsencrypt.org/" target="_blank" rel="external">Let’s Encrypt</a></p>
<p>要利用这项服务，需要证明自己对网站的至高无上不可侵犯的神圣权利，方法之一是运行支持[ACME protocol]的Client，官网推荐了<a href="https://certbot.eff.org/" target="_blank" rel="external">Cerbot</a>。</p>
<p>在Cerbot主页可以选择自己的操作系统，会有详细的步骤，在此不表。</p>
<p>下面谈两个问题，一是强制重定向至HTTPS，二是取消管理端口的HTTPS。</p>
<h6 id="强制HTTPS"><a href="#强制HTTPS" class="headerlink" title="强制HTTPS"></a>强制HTTPS</h6><p>Vestacp的架构是用nginx做proxy，Apache2做HTTP Server，首先下载nginx template（proxy template）：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/vesta/data/templates/web
<span class="token function">wget</span> http://c.vestacp.com/0.9.8/rhel/force-https/nginx.tar.gz
<span class="token function">tar</span> -xzvf nginx.tar.gz
<span class="token function">rm</span> -f nginx.tar.gz
</code></pre>
<p>之后在Package配置里，将proxy template配置为force-https，这样，身份由相应Package定义的用户建站时，proxy template就是用的强制HTTPS版本了。</p>
<h6 id="取消管理端口的SSL"><a href="#取消管理端口的SSL" class="headerlink" title="取消管理端口的SSL"></a>取消管理端口的SSL</h6><p>用chrome访问管理页面时，会有Unsecure的警告，这里的SSL在<code>/usr/local/vesta/nginx/conf/nginx.conf</code>中配置。找到</p>
<pre><code># Vhost
server {
    listen          8083;
    server_name     _;
    root            /usr/local/vesta/web;
    charset         utf-8;

    # Fix error &quot;The plain HTTP request was sent to HTTPS port&quot;
    error_page      497 https://$host:$server_port$request_uri;

    # ssl                  on;
    # ssl_certificate      /usr/local/vesta/ssl/certificate.crt;
    # ssl_certificate_key  /usr/local/vesta/ssl/certificate.key;
    # ssl_session_cache    shared:SSL:10m;
    # ssl_session_timeout  10m;
</code></pre><p>将配置SSL的几行注释掉即可。顺便，管理页面的端口也可以在这里更改。之后运行<code>service vesta restart</code>重启服务。</p>
<h3 id="域名与DNS"><a href="#域名与DNS" class="headerlink" title="域名与DNS"></a>域名与DNS</h3><p>最后简单提一下域名注册跟DNS。要注意的几个点：</p>
<ul>
<li>国内域名注册要备案，很烦，但cn域名好便宜。</li>
<li>在域名注册商那里配置DNS解析服务器（万网、DNSPod都好，不一定用自建网站的DNS）</li>
<li>在DNS服务商那里添加解析记录，顺便开启监控</li>
</ul>
<h3 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h3><p>域名备案的时候，需要签一张备案单。方案是在纸上签字后调背景为透明，用Adobe PDF Reader的签字功能签好PDF，再转成JPG。</p>
<p>几项操作都可以通过在线工具完成，低碳生活，人人有责。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li><p>建站过程本身就其乐无穷，教程一抓一大把，难的在TROUBLE SHOOTING，所以Google是最好的伴侣。</p>
</li>
<li><p>命令行、vi编辑、必要的WEB知识等是基础，在此感谢我们的墙两年前就教给我这些东西。</p>
</li>
</ul>
<p>@<a href="https://ddlee.cn" target="_blank" rel="external">ddlee</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 云主机 </tag>
            
            <tag> Vestacp </tag>
            
            <tag> 博客迁移 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HADOOP学习速记]]></title>
      <url>http://blog.ddlee.cn/2017/03/30/HADOOP%E5%AD%A6%E4%B9%A0%E9%80%9F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h4 id="HDFS-分布式文件系统"><a href="#HDFS-分布式文件系统" class="headerlink" title="HDFS: 分布式文件系统"></a>HDFS: 分布式文件系统</h4><p>NameNode, DataNode: a MetaData-Data Model<br>Strategy: Block split, multi-copy, distribution</p>
<p>NameNode: High Availability<br>solution 1: backup using NFS<br>solution 2: Two NameNodes(Active and Standby)</p>
<h4 id="MapReduce-计算框架"><a href="#MapReduce-计算框架" class="headerlink" title="MapReduce: 计算框架"></a>MapReduce: 计算框架</h4><p>split -&gt; Process -&gt; aggregate</p>
<p>Deamon: Job Tracker &amp; Task Tracker</p>
<h4 id="Design-Pattern"><a href="#Design-Pattern" class="headerlink" title="Design Pattern"></a>Design Pattern</h4><h3 id="Course-Project"><a href="#Course-Project" class="headerlink" title="Course Project"></a>Course Project</h3><p>（未完待续）<br>@<a href="https://ddlee.cn" target="_blank" rel="external">ddlee</a></p>
]]></content>
      
        <categories>
            
            <category> AI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Data </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kaggle比赛中EDA：流程、做法与目的]]></title>
      <url>http://blog.ddlee.cn/2017/03/26/Kaggle%E6%AF%94%E8%B5%9B%E4%B8%ADEDA%EF%BC%9A%E6%B5%81%E7%A8%8B%E3%80%81%E5%81%9A%E6%B3%95%E4%B8%8E%E7%9B%AE%E7%9A%84/</url>
      <content type="html"><![CDATA[<h4 id="数据集大小、字段及相应的数据类型"><a href="#数据集大小、字段及相应的数据类型" class="headerlink" title="数据集大小、字段及相应的数据类型"></a>数据集大小、字段及相应的数据类型</h4><ul>
<li>大小：占用内存估计</li>
<li>字段数：维度估计，是否需要降维</li>
<li>数据类型：numerical, factor, string, etc. 是否需要归一化，二元化等等</li>
</ul>
<h4 id="了解数据的缺失值情况及分布"><a href="#了解数据的缺失值情况及分布" class="headerlink" title="了解数据的缺失值情况及分布"></a>了解数据的缺失值情况及分布</h4><h4 id="了解数据分布情况，可用众多图形完成"><a href="#了解数据分布情况，可用众多图形完成" class="headerlink" title="了解数据分布情况，可用众多图形完成"></a>了解数据分布情况，可用众多图形完成</h4><ul>
<li>bar plot</li>
<li>histogram</li>
<li>violin plot</li>
<li>box plot</li>
<li>scatter plot</li>
</ul>
<h5 id="主要目的："><a href="#主要目的：" class="headerlink" title="主要目的："></a>主要目的：</h5><ol>
<li>了解整体状况，是否具有野点</li>
<li>结合目标变量，考察特征与目标变量间的相关性</li>
</ol>
<h5 id="文本数据常用的探索："><a href="#文本数据常用的探索：" class="headerlink" title="文本数据常用的探索："></a>文本数据常用的探索：</h5><ul>
<li>词频统计（消除stopwords之后）</li>
<li>词云</li>
</ul>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>本来文章是从几个经典的EDA notebook开始，试图总结出其共性之处，但写来写去，总觉得随便一本跟数据分析相关的书中，探索性数据分析的章节也大概都会涉及到这些内容，但在读书的情景之下又难留下深刻的印象，做分析的真正见地与经验，还是要从实践中来啊。</p>
<p>@<a href="https://ddlee.cn" target="_blank" rel="external">ddlee</a></p>
]]></content>
      
        <categories>
            
            <category> Data Science </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Kaggle </tag>
            
            <tag> EDA </tag>
            
            <tag> Data Sciencce </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Udacity课程： Intro to DevOps侧记]]></title>
      <url>http://blog.ddlee.cn/2017/03/22/DevOps%E4%BE%A7%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>文章主要内容来自Udacity的课程：<a href="https://www.udacity.com/course/intro-to-devops--ud611" target="_blank" rel="external">Intro to DevOps</a></p>
<h3 id="CAMS-The-DevOps-Lifecycle"><a href="#CAMS-The-DevOps-Lifecycle" class="headerlink" title="CAMS: The DevOps Lifecycle"></a>CAMS: The DevOps Lifecycle</h3><p>The Purpose of DevOps： 产品、开发、运维之间的协作问题</p>
<h4 id="Definition-from-wiki"><a href="#Definition-from-wiki" class="headerlink" title="Definition(from wiki)"></a>Definition(from wiki)</h4><blockquote>
<p>a set of practices that emphasize the collaboration and communication of both software developers and information technology (IT) professionals while automating the process of software delivery and infrastructure changes.</p>
</blockquote>
<p><img src="/img/DevOps/Devops_venn.png" alt="DevOps_Venn"><br>(<a href="https://commons.wikimedia.org/wiki/File:Devops.png" target="_blank" rel="external">Source</a>)</p>
<p>对比： Agile Development（敏捷软件开发）</p>
<p>Plan-&gt;Code-&gt;Test-&gt;Release-&gt;Deploy-&gt;Operate</p>
<h4 id="Means-of-CAMS"><a href="#Means-of-CAMS" class="headerlink" title="Means of CAMS"></a>Means of CAMS</h4><ul>
<li>C: Culture</li>
<li>A: Automation</li>
<li>M: Measurement</li>
<li>S: Sharing</li>
</ul>
<h3 id="The-DevOps-Environment"><a href="#The-DevOps-Environment" class="headerlink" title="The DevOps Environment"></a>The DevOps Environment</h3><p>Solving the Environment Problem:</p>
<ul>
<li>Golden Image: apps-libs-OS</li>
<li>Configuration Management</li>
</ul>
<h4 id="Course-Project（使用Golden-Image方案，引入一批DevOps工具"><a href="#Course-Project（使用Golden-Image方案，引入一批DevOps工具" class="headerlink" title="Course Project（使用Golden Image方案，引入一批DevOps工具)"></a>Course Project（使用Golden Image方案，引入一批DevOps工具)</h4><p>dependencies-&gt;build scripts-&gt;tests-&gt;web apps</p>
<h5 id="Packer"><a href="#Packer" class="headerlink" title="Packer"></a>Packer</h5><p>Packer is an open source tool for creating identical machine images for multiple platforms from a single source configuration.</p>
<ul>
<li><code>Artifacts</code> are the results of a single build, and are usually a set of IDs or files to represent a machine image.</li>
<li><code>Builds</code> are a single task that eventually produces an image for a single platform.</li>
<li><code>Builders</code> are components of Packer that are able to create a machine image for a single platform.</li>
<li><code>Commands</code> are sub-commands for the packer program that perform some job.</li>
<li><code>Post-processors</code> are components of Packer that take the result of a builder or another post-processor and process that to create a new artifact.</li>
<li><code>Provisioners</code> are components of Packer that install and configure software within a running machine prior to that machine being turned into a static image.</li>
<li><code>Templates</code> are JSON files which define one or more builds by configuring the various components of Packer.</li>
</ul>
<p><a href="https://github.com/ddlee96/devops-intro-project/blob/master/packer-templates/application-server.json" target="_blank" rel="external">Example JSON File</a></p>
<h5 id="Vagrant"><a href="#Vagrant" class="headerlink" title="Vagrant"></a>Vagrant</h5><p>Vagrant is a tool for building complete development environments. With an easy-to-use workflow and focus on automation, Vagrant lowers development environment setup time, increases development/production parity, and makes the “works on my machine” excuse a relic of the past.</p>
<h5 id="Project-Workflow-Packer-gt-Vagrant-gt-Virtualbox-gt-Web-Application"><a href="#Project-Workflow-Packer-gt-Vagrant-gt-Virtualbox-gt-Web-Application" class="headerlink" title="Project Workflow: Packer-&gt;Vagrant-&gt;Virtualbox-&gt;Web Application"></a>Project Workflow: Packer-&gt;Vagrant-&gt;Virtualbox-&gt;Web Application</h5><h6 id="Part-I-Building-a-box-with-Packer"><a href="#Part-I-Building-a-box-with-Packer" class="headerlink" title="Part I: Building a box with Packer"></a>Part I: Building a box with Packer</h6><p>From the packer-templates directory on your local machine:</p>
<ul>
<li><p>Run <code>packer build -only=virtualbox-iso application-server.json</code></p>
<p>Troubleshooting: <em>Find the newest version number and checksum from the <a href="http://releases.ubuntu.com/trusty/" target="_blank" rel="external">Ubuntu website for this release</a></em><br><em>Edit <code>PACKER_BOX_NAME</code> and <code>iso_checksum</code> in the template files to match that version number and checksum.</em></p>
</li>
<li>Run <code>cd virtualbox</code></li>
<li>Run <code>vagrant box add ubuntu-14.04.4-server-amd64-appserver_virtualbox.box --name devops-appserver</code></li>
<li>Run <code>vagrant up</code></li>
<li>Run <code>vagrant ssh</code> to connect to the server</li>
</ul>
<h6 id="Part-II-Cloning-developing-and-running-the-web-application"><a href="#Part-II-Cloning-developing-and-running-the-web-application" class="headerlink" title="Part II: Cloning, developing, and running the web application"></a>Part II: Cloning, developing, and running the web application</h6><ul>
<li>On your local machine go to the root directory of the cloned repository</li>
<li>Run <code>git clone https://github.com/chef/devops-kungfu.git devops-kungfu</code></li>
<li>Open <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> from your local machine to see the app running.</li>
<li>In the VM, run <code>cd devops-kungfu</code></li>
<li>To install app specific node packages, run <code>sudo npm install</code>. You may see several errors; they can be ignored for now.</li>
<li>Now you can run tests with the command <code>grunt -v</code>. The tests will run, then quit with an error.</li>
</ul>
<h6 id="On-Cloud-platform"><a href="#On-Cloud-platform" class="headerlink" title="On Cloud platform"></a>On Cloud platform</h6><p>Similar commands using packer:</p>
<ul>
<li><code>packer build -only=amazon-ebs &lt;server-name&gt;.json</code></li>
<li><code>packer build -only=googlecompute application-server.json</code></li>
</ul>
<h3 id="Continuous-Integration（持续集成）"><a href="#Continuous-Integration（持续集成）" class="headerlink" title="Continuous Integration（持续集成）"></a>Continuous Integration（持续集成）</h3><p>CI System:</p>
<p><img src="/img/DevOps/CI.png" alt="CI"></p>
<h4 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h4><p>Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks such as building, testing, and deploying software.</p>
<p>Using command:<br><code>packer build -only=&lt;cloud service target&gt; control-server.json</code></p>
<p><a href="https://github.com/ddlee96/devops-intro-project/blob/master/packer-templates/control-server.json" target="_blank" rel="external">Example control-server.json file</a></p>
<p>Jenkins was configured to be installed according to <code>Provisioners</code>.</p>
<p>After building and launching, access Jenkins via URL <code>/jenkins</code>.</p>
<h4 id="Testing（测试，QA）"><a href="#Testing（测试，QA）" class="headerlink" title="Testing（测试，QA）"></a>Testing（测试，QA）</h4><ul>
<li>Unit Testing</li>
<li>Regression testing</li>
<li>Smoke testing</li>
<li>System Integration testing</li>
<li>Automate acceptance testing</li>
<li>Manual QA testing</li>
</ul>
<p>Adding Manual QA step in Pipeline</p>
<p><img src="/img/DevOps/pipline.png" alt="Pipeline"></p>
<h4 id="Monitoring"><a href="#Monitoring" class="headerlink" title="Monitoring"></a>Monitoring</h4><p>Monitoring process:</p>
<p><img src="/img/DevOps/Monitoring.png" alt="Monitoring"></p>
<h3 id="Additional-Resources"><a href="#Additional-Resources" class="headerlink" title="Additional Resources"></a>Additional Resources</h3><p><a href="https://www.udacity.com/wiki/ud611#!#additional-resources" target="_blank" rel="external">Course Wiki</a></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>DevOps从开发和运维合作的角度审视软件开发过程，并提供了一套方法论，涉及开发、测试、部署、维护、监测各个方面。软件行业，不仅仅是写代码而已。</p>
<p>@<a href="https://ddlee.cn" target="_blank" rel="external">ddlee</a></p>
]]></content>
      
        <categories>
            
            <category> Internet </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> 技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python与SQL_Server的交互：pyODBC, pymssql, SQLAlchemy]]></title>
      <url>http://blog.ddlee.cn/2017/03/16/Python%E4%B8%8ESQL_Server%E7%9A%84%E4%BA%A4%E4%BA%92%EF%BC%9ApyODBC,%20pymssql,%20SQLAlchemy/</url>
      <content type="html"><![CDATA[<p>Windows平台下Python读取、写入SQL Server相关的函数库，文章结构如下：</p>
<p><img src="/img/Python+SQLserver/Python+SQL_Server.png" alt="Python+SQLserver"></p>
<h3 id="Python-Drivers"><a href="#Python-Drivers" class="headerlink" title="Python Drivers"></a>Python Drivers</h3><h4 id="PyODBC"><a href="#PyODBC" class="headerlink" title="PyODBC"></a>PyODBC</h4><p>Annaconda下可以用<code>pip install pyodbc</code>安装，也可以到<a href="https://www.microsoft.com/en-us/download/details.aspx?id=50420" target="_blank" rel="external">这里</a>下载。</p>
<p>首先建立<code>connection</code>对象：</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pyodbc
conn <span class="token operator">=</span> pyodbc<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>
    r<span class="token string">'DRIVER={ODBC Driver 11 for SQL Server};'</span>  <span class="token comment" spellcheck="true">#or {ODBC Driver 13 for SQL Server}</span>
    r<span class="token string">'SERVER=ServerHostName;'</span>
    r<span class="token string">'DATABASE=DBName;'</span>
    r<span class="token string">'UID=user;'</span>
    r<span class="token string">'PWD=password'</span>
    <span class="token punctuation">)</span>
</code></pre>
<p>添加游标（Cursor）对象并执行SQL查询语句：</p>
<pre class=" language-python"><code class="language-python">cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>
cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'SQL Query Goes Here'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> row <span class="token keyword">in</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>rows<span class="token punctuation">.</span><span class="token punctuation">[</span>column name<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<p>更多信息参见<a href="https://docs.microsoft.com/en-us/sql/connect/python/pyodbc/python-sql-driver-pyodbc" target="_blank" rel="external">MSDN DOCs</a>。</p>
<h4 id="pymssql"><a href="#pymssql" class="headerlink" title="pymssql"></a>pymssql</h4><p>同样可以用<code>pip install pymssql</code>安装，也可以到<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pymssql" target="_blank" rel="external">这里</a>，然后用<code>pip</code>安装<code>wheel</code>文件。</p>
<p>pymssql目前还不支持Python3.6，这点要注意下。</p>
<p>pymssql的用法跟pyODBC很像，下面是官网给出的例子：</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> os <span class="token keyword">import</span> getenv
<span class="token keyword">import</span> pymssql

server <span class="token operator">=</span> getenv<span class="token punctuation">(</span><span class="token string">"PYMSSQL_TEST_SERVER"</span><span class="token punctuation">)</span>
user <span class="token operator">=</span> getenv<span class="token punctuation">(</span><span class="token string">"PYMSSQL_TEST_USERNAME"</span><span class="token punctuation">)</span>
password <span class="token operator">=</span> getenv<span class="token punctuation">(</span><span class="token string">"PYMSSQL_TEST_PASSWORD"</span><span class="token punctuation">)</span>

conn <span class="token operator">=</span> pymssql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>server<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token string">"tempdb"</span><span class="token punctuation">)</span>
cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>
cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""
IF OBJECT_ID('persons', 'U') IS NOT NULL
    DROP TABLE persons
CREATE TABLE persons (
    id INT NOT NULL,
    name VARCHAR(100),
    salesrep VARCHAR(100),
    PRIMARY KEY(id)
)
"""</span><span class="token punctuation">)</span>
cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span>
    <span class="token string">"INSERT INTO persons VALUES (%d, %s, %s)"</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'John Smith'</span><span class="token punctuation">,</span> <span class="token string">'John Doe'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Jane Doe'</span><span class="token punctuation">,</span> <span class="token string">'Joe Dog'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Mike T.'</span><span class="token punctuation">,</span> <span class="token string">'Sarah H.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># you must call commit() to persist your data if you don't set autocommit to True</span>
conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>

cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'SELECT * FROM persons WHERE salesrep=%s'</span><span class="token punctuation">,</span> <span class="token string">'John Doe'</span><span class="token punctuation">)</span>
row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> row<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ID=%d, Name=%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>

conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>详细用法参见<a href="http://www.pymssql.org/en/stable/index.html" target="_blank" rel="external">pymssql docs</a>和<a href="https://docs.microsoft.com/en-us/sql/connect/python/pymssql/python-sql-driver-pymssql" target="_blank" rel="external">MSDN DOCs</a></p>
<h4 id="SQLAlchemy-Python-SQL-Toolkit"><a href="#SQLAlchemy-Python-SQL-Toolkit" class="headerlink" title="SQLAlchemy(Python SQL Toolkit)"></a><a href="https://www.sqlalchemy.org/" target="_blank" rel="external">SQLAlchemy</a>(Python SQL Toolkit)</h4><p>SQLAlchemy提供了一系列丰富、完整、（我看不懂）的API用于数据库操作。这里只谈其<code>create_engine</code>方法。</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine
<span class="token comment" spellcheck="true"># pyodbc</span>
engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mssql+pyodbc://user:password@DSNname'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#需要配置DSN，参见最后一节</span>

<span class="token comment" spellcheck="true"># pymssql</span>
engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mssql+pymssql://user:password@Hostname:port/DBname'</span><span class="token punctuation">)</span>
</code></pre>
<p>利用创建好的<code>engine</code>，可以结合pandas库进行批量的读取、写入操作。</p>
<p>用SQLAlchemy与其他类型的数据库建立链接的方法参见<a href="http://docs.sqlalchemy.org/en/latest/core/engines.html" target="_blank" rel="external">这里</a>。</p>
<h4 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h4><p>利用pyODBC和pymssql拉取的对象需要进一步处理才能进行常见的数据清洗等工作，而Pandas也提供了SQL相关的方法，在SQLAlchemy的辅助下，可以将<code>DataFrame</code>对象直接写入table。</p>
<h5 id="读取：pd-read-sql"><a href="#读取：pd-read-sql" class="headerlink" title="读取：pd.read_sql()"></a>读取：pd.read_sql()</h5><p><a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_sql.html" target="_blank" rel="external">API</a>：</p>
<pre class=" language-python"><code class="language-python">pandas<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> con<span class="token punctuation">,</span> index_col<span class="token operator">=</span>None<span class="token punctuation">,</span> coerce_float<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> params<span class="token operator">=</span>None<span class="token punctuation">,</span> parse_dates<span class="token operator">=</span>None<span class="token punctuation">,</span> columns<span class="token operator">=</span>None<span class="token punctuation">,</span> chunksize<span class="token operator">=</span>None<span class="token punctuation">)</span>
</code></pre>
<p>其中的<code>con</code>参数，可以传入SQLAlchemy建立的<code>engine</code>对象，也可以是pyODBC或者pymssql建立的<code>DBAPI2 connection</code>对象。</p>
<h5 id="写入-pd-DataFrame-to-sql"><a href="#写入-pd-DataFrame-to-sql" class="headerlink" title="写入:pd.DataFrame.to_sql()"></a>写入:pd.DataFrame.to_sql()</h5><p><a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_sql.html" target="_blank" rel="external">API</a>:</p>
<pre class=" language-python"><code class="language-python">DataFrame<span class="token punctuation">.</span>to_sql<span class="token punctuation">(</span>name<span class="token punctuation">,</span> con<span class="token punctuation">,</span> flavor<span class="token operator">=</span>None<span class="token punctuation">,</span> schema<span class="token operator">=</span>None<span class="token punctuation">,</span> if_exists<span class="token operator">=</span><span class="token string">'fail'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index_label<span class="token operator">=</span>None<span class="token punctuation">,</span> chunksize<span class="token operator">=</span>None<span class="token punctuation">,</span> dtype<span class="token operator">=</span>None<span class="token punctuation">)</span>
</code></pre>
<p>这里的<code>con</code>参数，只支持sqlite3的<code>DBAPI2 connection</code>对象，支持所有的<code>SQLAlchemy engine</code>对象。<br><code>name</code>参数传入表名，用<code>if_exists</code>参数控制表存在时的动作：</p>
<ul>
<li><code>‘fail’</code>: 啥也不干。</li>
<li><code>’replace‘</code>: 将原有表删除，新建表，插入数据。</li>
<li><code>’append&#39;</code>: 在表中插入数据。表不存在时新建表。</li>
</ul>
<h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>利用<code>Sqlcmd</code>命令，也可以在命令行下执行SQL文件，用法如下：</p>
<pre class=" language-bash"><code class="language-bash">sqlcmd -U user -P password -S server -d DBName -i /path/to/myScript.sql
</code></pre>
<p>这样可以有如下思路，将数据写入.SQL文件，再生成.bat文件（批量）写入上述命令，之后完成执行。</p>
<h3 id="DSN"><a href="#DSN" class="headerlink" title="DSN"></a>DSN</h3><p>Windows下可以配置DSN(Data Source Names)预先存储数据库连接的信息，在<em>Control Panel</em> -&gt; <em>Administrative Tools</em> -&gt; <em>ODBC Data Source</em> 下添加即可。</p>
<p>配置好DSN后，pyODBC的连接过程可以简化为：</p>
<pre class=" language-python"><code class="language-python">conn <span class="token operator">=</span> pyodbc<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>r<span class="token string">'DSN=DSNname;UID=user;PWD=password'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#UID和PWD也可以在DSN中配置</span>
</code></pre>
<h3 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h3><p>Python与文件的IO、SQL数据库的读写时有中文字符可能会有编码问题。一种方案是在中文字符串前添加N，如<code>N&#39;python大法好&#39;</code>；另一种方案是传入<code>encoding</code>参数，常用的中文编码有<code>GB2123</code>，<code>GB18030</code>，推荐的还是统一用<code>UTF-8</code>编码、解码。</p>
<p>利用如下命令，可以在SQLAlchemy中指定编码：</p>
<pre class=" language-python"><code class="language-python">engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mssql+pymssql://user:password@HostName\DBname'</span><span class="token punctuation">,</span> connect_args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'charset'</span><span class="token punctuation">:</span><span class="token string">'utf-8'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>其他自定义<code>DBAPI connect()</code>参数的方法参见<a href="http://docs.sqlalchemy.org/en/latest/core/engines.html#custom-dbapi-connect-arguments" target="_blank" rel="external">这里</a>。</p>
]]></content>
      
        <categories>
            
            <category> Data Science </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[再次折腾我的WNDR4300：OpenWrt文件共享]]></title>
      <url>http://blog.ddlee.cn/2017/03/12/%E5%86%8D%E6%AC%A1%E6%8A%98%E8%85%BE%E6%88%91%E7%9A%84WNDR4300/</url>
      <content type="html"><![CDATA[<blockquote>
<p>生命不惜，折腾不止。</p>
</blockquote>
<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>再次成为IOS用户后，访问Google和文件共享成了两大需求。问题出现了，就要解决，于是有此文记录的活动。</p>
<h3 id="重新安装OpenWrt"><a href="#重新安装OpenWrt" class="headerlink" title="重新安装OpenWrt"></a>重新安装OpenWrt</h3><p>OpenWrt已经到了<code>15.05</code>版本，版本代号是<code>Chaos Calmer</code>。重装需要的<code>-factory.img</code>，可以在<a href="https://downloads.openwrt.org/chaos_calmer/15.05/" target="_blank" rel="external">这里</a>下载。</p>
<p>我的WNDR4300平台是<code>ar71xx</code>，可以从OpenWrt对应的<a href="https://wiki.openwrt.org/toh/hwdata/netgear/netgear_wndr4300_v1" target="_blank" rel="external">硬件主页</a>找到固件镜像文件。</p>
<h4 id="TFTP重装"><a href="#TFTP重装" class="headerlink" title="TFTP重装"></a>TFTP重装</h4><p>如果你的路由器还是出厂系统的话，可以通过登入后台在线上传镜像文件进行刷机，而我的已经是OpenWrt系统，只能通过网页端升级，故选用了TFTP方式刷机。</p>
<p>刷机步骤摘自<a href="https://wiki.openwrt.org/toh/netgear/wndr4300" target="_blank" rel="external">OpenWrt wiki</a></p>
<p>&gt;</p>
<blockquote>
<ol>
<li>set a static IP on your computer, i.e 192.168.1.35, and connect the ethernet cable to the router</li>
<li>power on the router</li>
<li>press and hold the RESET button as soon as the switch LEDs light up.</li>
<li>keep holding RESET until the power LED begins to flash orange and then green.</li>
<li>once the power LED is flashing green, release RESET</li>
<li>start the TFTP transfer to router at 192.168.1.1. In your computer execute:<br><code>tftp 192.168.1.1 -m binary -c put factory.img</code></li>
</ol>
</blockquote>
<p>总体来说是分为三步：</p>
<ol>
<li>将电脑与路由器设置在同一内网中</li>
<li>令路由器进入恢复模式</li>
<li>利用TFTP将刷机包推入路由器</li>
</ol>
<h3 id="U盘挂载，文件共享"><a href="#U盘挂载，文件共享" class="headerlink" title="U盘挂载，文件共享"></a>U盘挂载，文件共享</h3><p>安装好OpenWrt后，就可以从网页端访问路由器，设置PPPoE拨号，设置WIFI等等。</p>
<h4 id="U盘挂载"><a href="#U盘挂载" class="headerlink" title="U盘挂载"></a>U盘挂载</h4><p>U盘挂载部分主要参考了<a href="https://my.oschina.net/umu618/blog/282984" target="_blank" rel="external">跟 UMU 一起玩 OpenWRT（入门篇6）：挂接 U 盘</a>。</p>
<p>首先是安装相应的包：</p>
<pre class=" language-bash"><code class="language-bash">opkg update

<span class="token comment" spellcheck="true"># 核心包</span>
opkg <span class="token function">install</span> kmod-usb-storage
opkg <span class="token function">install</span> kmod-scsi-generic

<span class="token comment" spellcheck="true"># 文件系统</span>
opkg <span class="token function">install</span> kmod-fs-ext4

<span class="token comment" spellcheck="true"># 辅助工具</span>
opkg <span class="token function">install</span> usbutils <span class="token function">fdisk</span> e2fsprogs
</code></pre>
<p>利用<code>lsusb</code>命令查看U盘是否已经被路由器识别。</p>
<p>这时可以选择用fdisk进行重新分区，不需要分区的话，可以用命令<code>ls /dev | grep sd</code>查看/dev分区中是否已经出现U盘。</p>
<p>在OpenWrt上使用U盘，建议用ext4格式，可以用下面的命令进行格式化：</p>
<pre><code># sda1为上一命令得到的结果
mkfs.ext4 /dev/sda1
</code></pre><p>接下来就可以用<code>mount</code>命令进行挂载了：</p>
<pre><code># 路径/mnt/usb/即为挂载目标点
mkdir /mnt/usb
touch /mnt/usb/USB_DISK_NOT_PRESENT
chmod 555 /mnt/usb
chmod 444 /mnt/usb/USB_DISK_NOT_PRESENT
mount /dev/sda1 /mnt/usb
</code></pre><p>这时可以测试一下，如果U盘里面存储了文件，可以通过<code>/mnt/usb</code>访问的到。</p>
<p>下面是开机自动挂载U盘的命令。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># block-mount blkid用于查看U盘的UUID</span>
opkg <span class="token function">install</span> block-mount blkid

<span class="token comment" spellcheck="true"># 实际上要操作的是fstab的配置文件/etc/config/fstab，要将enabled值改成1</span>
block detect <span class="token operator">></span> /etc/config/fstab
uci <span class="token keyword">set</span> fstab.@mount<span class="token punctuation">[</span>-1<span class="token punctuation">]</span>.target<span class="token operator">=</span><span class="token string">'/mnt/usb'</span> u
ci <span class="token keyword">set</span> fstab.@mount<span class="token punctuation">[</span>-1<span class="token punctuation">]</span>.enabled<span class="token operator">=</span>1
uci commit fstab
</code></pre>
<p>更详细的信息可以参见<a href="http://wiki.openwrt.org/doc/uci/fstab" target="_blank" rel="external">这里</a></p>
<h4 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h4><p>文件共享可以通过FTP和SAMBA，推荐的方式是SAMBA。</p>
<h5 id="SAMBA"><a href="#SAMBA" class="headerlink" title="SAMBA"></a>SAMBA</h5><p>安转SAMBA：</p>
<pre class=" language-bash"><code class="language-bash">opkg update
opkg <span class="token function">install</span> samba36-server

<span class="token comment" spellcheck="true"># luci程序，可选</span>
opkg <span class="token function">install</span> luci-app-samba
</code></pre>
<p>安装好SAMBA后，主要配置两个参数，一是共享文件夹的路径，如<code>/mnt/usb/sambashare</code>，可以通过更改配置文件<code>/etc/samba/smb.conf</code>实现，也可以通过luci实现。</p>
<p>示例：</p>
<pre><code>[sambashare]
path = /mnt/usb/sambashare
valid users = root
read only = no
guest ok = yes
create mask = 0750
directory mask = 0750
</code></pre><p>第二个参数是访问账户，可以通过命令<code>sambpasswd -a</code>将你的当前用户加入到SAMBA的组中，需要设置一个密码。另外，可能需要将配置文件<code>/etc/samba/smb.conf</code>的[global]中的<code>invalid users = root</code>注释掉。</p>
<p>最后，设置SAMBA服务启动和开机自启</p>
<pre class=" language-bash"><code class="language-bash">/etc/init.d/samba start
/etc/init.d/samba <span class="token function">enable</span>
</code></pre>
<h5 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h5><p>FTP可以用<code>vsftpd</code>包来设置，大致过程与SAMBA类似：设置路径、添加用户、设置自启。</p>
<p>SAMBA服务可以在Windows文件资源管理器中自动检测的到，Linux下可以通过<code>smb://Host/sharepath</code>访问，在IOS系统中，类似Documents的应用也支持添加SAMBA的功能。</p>
<p>这里强推一下Documents这个应用，结合PDF EXPERT，已经成为了我的文档中心。</p>
<h3 id="访问Google"><a href="#访问Google" class="headerlink" title="访问Google"></a>访问Google</h3><p>这部分操作相当复杂，主要参考<a href="https://cokebar.info/archives/664" target="_blank" rel="external">这里</a>，感谢博主。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这天的活动，本来只有我和上帝知道，再过一个月，就只有上帝知道了。遂作笔记。</p>
<p>@<a href="https://ddlee.cn" target="_blank" rel="external">ddlee</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OpenWrt </tag>
            
            <tag> 路由器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[谁会不厌其烦地安慰那无知的少年（三）]]></title>
      <url>http://blog.ddlee.cn/2017/03/03/%E8%B0%81%E4%BC%9A%E4%B8%8D%E5%8E%8C%E5%85%B6%E7%83%A6%E5%9C%B0%E5%AE%89%E6%85%B0%E9%82%A3%E6%97%A0%E7%9F%A5%E7%9A%84%E5%B0%91%E5%B9%B4-3/</url>
      <content type="html"><![CDATA[<blockquote>
<p><em>年轻的时候可以随随便便喜欢一个人，可千万别真动情。那样的话你的余生就剩两种状态了，一种叫做想她，另一种是为克制自己想她而努力。——丁丁前舍友</em></p>
</blockquote>
<p>丁丁的舍友告诉他，那年不懂事，一直陷于人生的错觉之中。</p>
<p>他觉得那女生好像喜欢她，做什么事儿都是像在针对他，总是跑来问问题呀，不懂的时候卖个萌啊，连谢谢的话都是奶声奶气的。</p>
<p>可他怎么能被这个给连累了呢。</p>
<p>他可是老师眼中最有希望的学生，早熟的他也明白合适的平台对自己的发展是多么重要。他觉得在人生的一段时间内能单纯地为一个目标而奋斗是一件幸福的事儿，任何分心的想法都是罪恶。</p>
<p>他在开始之前，就故作冷漠，就像结束了之后想要挽回那样。</p>
<p>丁丁插着话问到底什么开始什么结束的啊？</p>
<p>舍友答，年少的初恋啊我的旁友！</p>
<p>舍友顿了顿，眼里含着惋惜。</p>
<p>讲真，我是那种动情就会倾其所有的人，我真真觉得一生就只够爱一个人。但让我从没想到的是，我的故作冷漠才是动情的开始啊。</p>
<p>那时候我千方百计地回避她。</p>
<p>我特别跟组里的同学换了座位，这样就能离她远一点。</p>
<p>问题的时候我也爱搭不理的，不是把她推给别人就是拖着藏着。</p>
<p>她也算知趣，渐渐的就不来烦我了。</p>
<p>就这样吧，高考完了以后，我们去了不同的学校，离得八十万杆子都打不着。</p>
<p>但我逐渐的发现，这颗种子，已经在我的心底长成了参天大树，不管我给它什么样的脸色，它还是生长起来了。</p>
<p>我再也不能回避它了，我再也不能隐藏它了。</p>
<p>我以前听人家说暗恋一个人的时候，把她的动态错过都会有罪恶感。</p>
<p>我细细的品味她的日志、说说里流露出来的情感，挖空心思复原她写下这些文字时的心情，然后小心翼翼地写下我的评论，斟酌一下，再发表。然后就是每隔几个小时就刷一下，看看她回复了没有。</p>
<p>我也找她聊天，谈心，新的生活还适应没，高数有哪些不懂的跟我说说。</p>
<p>我也跟她讲我的近况，我在听什么歌，我在读哪些书。</p>
<p>可我从来都不敢表露我真实的心意，我也从来不敢提高中时候我的那段冷漠的时光。</p>
<p>可是，你知道吗，就跟吃巧克力一样，她吃到了苦的，我却吃了块甜的，德芙，带榛果颗粒的。</p>
<p>我终于等到了一个机会——她生病住院了。</p>
<p>急性胃炎，但她没跟我说，她的闺蜜告诉我的。</p>
<p>我买了票，赶到她所在的城市，在一个下着小雨的傍晚。</p>
<p>行人匆匆，从四面赶往八方。风催着云，一来一回地玩弄着月亮，雨打在肩上，我才知道我还没有方向。</p>
<p>我给她打电话，说我来看你来了，你在哪家医院。</p>
<p>她说你怎么来了，她已经快好了，明天就要出院，那你过来吧，在江东北路的那家人民医院，8号楼，324。</p>
<p>我说没事儿，马上就到。</p>
<p>不过地铁并不方便，只能在珠江路那里下，我就打算骑ofo过去。</p>
<p>然而我还是太年轻了，南方的冬天下着雨，可没那么好欺负，找路，问路，手冻僵，衣服也淋湿了，我想着张士超华师大的姑娘真的那么可爱吗。</p>
<p>等我赶到时，已经是需要照顾的人了，一副洋葱模样，就剩一层一层剥开了。</p>
<p>狼狈的我跑到厕所里，等个没人的空档，用烘干机吹了吹头发，把外套脱下来搭在胳膊上，这才往病房赶去。</p>
<p>丁丁的舍友推了下眼镜，接着说。</p>
<p>你可知道什么叫近乡情更怯呀，就跟查高考成绩一样啊，你再往前一步，就把那些想象过的所有美好的可能性全破除了，木已成舟，一切皆不可挽回，尽管，尽管你不往前一步，一切也早就注定了呀。</p>
<p>我在病房门前愣住了，万一里面还有人怎么办，她的同学在晚上应该会陪她吧，她不会有男朋友了吧？</p>
<p>我跑到离门远一点的地方，又给她打了个电话，我说我快到了，你有什么想吃的我给你带点。</p>
<p>她说不用了，你过来就好，她也想赶快见到我。</p>
<p>我说好的，这么突然出现，没赶上不方便的时候吧。</p>
<p>她说没事儿，你直接过来吧，哪有什么方便不方便的。</p>
<p>挂了之后，我在楼里瞎逛了几圈，顺手把紧急逃生的路线考察了一下，发现还是很科学的，指引也做的很到位。估摸时间差不多了，我就敲门进去了。</p>
<p>她留起了长发，比高中的时候成熟不少，但终归有病在身，脸色有些发白，不过酒窝还是那样可爱。</p>
<p>我们聊起来，从病情开始，一直聊到那些在网易云音乐的歌曲下面刷评论的考研党们到底考上了没。</p>
<p>她似乎很开心，我也很开心。</p>
<p>她说上了大学就没跟别人聊这么久过，还是以前的同学好呀。</p>
<p>我说那当然了，以后有什么事你第一个告诉我。</p>
<p>要走的时候，她说谢谢我这么大老远地跑过来，不过病差不多要好了，明天亲自到车站送送你。</p>
<p>我说不用了，我自己走就行，你好好养着身体吧，注意一下饮食。</p>
<p>离开医院 ，我随便找了家旅馆住下来。心底里无限的舒适与满足。但很快，紧张与自责将我包裹起来。</p>
<p>太懦弱了我真是，聊那些没什么用的干啥，我该直接跟她说我喜欢你三年了我们在一起吧。</p>
<p>可又转念一想，这也有点趁人之危吧，还是等等再说？</p>
<p>这一等就是一夜，我慢慢睡着，天刚刚破晓。</p>
<p>第二天，她还是来送我了，下地铁后，她用手机看了下时间，说还不晚不用着急。</p>
<p>她竟然用的Xperia。我心想我喜欢的女孩子就是有格调。</p>
<p>然后我就看到了手机桌面上男孩子的傻笑。</p>
<p>那个男孩子似乎不是我，我笑的时候不傻，眼睛眯成一条缝。</p>
<p>我说这也不早了你赶紧回去吧。</p>
<p>她说你开玩笑呢这才几点啊。</p>
<p>我说不对，我不是这个意思，我是说你不用跟我一起等了，我自己等，我自己能行。</p>
<p>她告诉我她当然相信我能行，不然怎么能自己跑过来看她呢。</p>
<p>我说也是哈，我这么催你干哈。</p>
<p>后面的事情我自己也记不清了。</p>
<p>回来的时候，出站换乘，转角碰见一家鲜花店，就进去买了一束满天星，捧着它回到寝室，摆在桌上。</p>
<p>我是眼睁睁地看着那一束花慢慢枯萎的。</p>
<p>不插在水中的话，只用了三天不到。</p>
<p>舍友说我那三天跟个傻逼一样。</p>
<p>后来她说我是她最好的朋友，跟高中的那个我完全不一样了。</p>
<p>原来她从来就没喜欢过我，而我也从来没承认过我那么心动，但你知道吗？这的的确确发生了。</p>
<p>舍友觉得可以做结了，便说出了这句丁丁永生难忘的话。</p>
<p>年轻的时候可以随随便便喜欢一个人，可千万别真动情。那样的话你的余生就剩一种状态了，那就是想她。</p>
<p>丁丁说没事儿你还有机会，天下没有不散的筵席，他们迟早会分的。</p>
<p>舍友说丁丁是傻逼。</p>
<p>————————————————全文完—————————————————</p>
<p>我不再强说上面的故事是瞎编的了。它们是丁丁亲口告诉我的，在一次卧谈会上。</p>
<p>丁丁说在刚好记得的时候讲出来，其实是自私的。</p>
<p>他说他从小到大失去了很多人，从每天早到学校开门的劳动课老师到害了白血病的不幸前桌，从打架斗殴满嘴义气话的小魔王到奔走他乡借读名校的竞争对手，当好友列表里的灰色头像终于不再跳动的时候，我就不再是完整的了，他们把我的一部分带走了，而且永远找也找不回来了。这个永远是真的。</p>
<p>我跟丁丁说你错了，你不知道更可怕的事情。你有没有想过，即使是陪你一起长大的人，也有很多东西找不回来了。像你的父母，你的淘气和无知，早就淹没在他们眼角的层层皱纹里了。而且，是你亲手把它们埋葬进去的。你看，谁都没有失去谁，谁也失去了谁。</p>
<p>丁丁说是啊，我们都变了，变得都有些记不起从前的样子了。人们总是到失去了才懂得珍惜，这真是瞎话，我们就从来没有拥有过。</p>
<p>我记起很久以前的一个秋天，我打开了一册我昔日嗜爱的书读了下去，突然回复到十四岁时那样温柔而多感，我在那里面找到了一节写在发黄的纸上的以这样两行开始的短诗：
　　　 　</p>
<blockquote>
<p>在你眼睛里我找到了童年的梦，<br>如在秋天的园子里找到了迟暮的花……</p>
</blockquote>
<p>@<a href="http://ddlee.cn" target="_blank" rel="external">ddlee</a></p>
<p>2017年3月</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[谁会不厌其烦地安慰那无知的少年（二）]]></title>
      <url>http://blog.ddlee.cn/2017/02/15/%E8%B0%81%E4%BC%9A%E4%B8%8D%E5%8E%8C%E5%85%B6%E7%83%A6%E5%9C%B0%E5%AE%89%E6%85%B0%E9%82%A3%E6%97%A0%E7%9F%A5%E7%9A%84%E5%B0%91%E5%B9%B4-2/</url>
      <content type="html"><![CDATA[<blockquote>
<p><em>不要做父母手中的烤鸭，要做一只自由的小小种马。——刘星，《（假的）家有儿女》</em></p>
</blockquote>
<p>丁丁再回到这条老街时，又是一年的光景。</p>
<p>这一年，家乡添了几处新房和俏媳妇，添了几家麻将交流中心，添了几座坟头。</p>
<p>村后的河今年却冻住了——往年不上冻的，因为里面东西太多。</p>
<p>村前公路两旁的树全砍掉了。主人缺钱，不缺树。</p>
<p>目力所及，坑洼的油漆路向北延伸到省道上，两旁田地里丛丛的麦子依偎而息，灰蒙蒙的天，树林间掩映着冬日里小姑娘红扑扑的脸蛋，那是北方的夕阳。哎呦，还蒙了层雾气。</p>
<p>这次回老家，丁丁照例去拜访过道尽头被奶奶称为”二嫂“的老太太。</p>
<p>二嫂是帝都过来的知青，这些年没入我们的乡音，跟谁也是一口侉侉的北京话。</p>
<p>她最著名的话是，“我主的了疼，也主的了管”。</p>
<p>这是跟人家解释为什么老打孙子。一时成为村里溺爱孙子老传统中的一股清流。</p>
<p>可老人家现在状态不好：去年初四，脑出血，救回来之后半边失去了控制，歪了嘴，动不了腿。</p>
<p>我进了门，走到轮椅边。老人眼睛亮了起来，一只手撑着扶手，要站起来。</p>
<p>我大声说奶奶您不用起来，多累啊。</p>
<p>二嫂摇着头坐下，攥着我的手，晃来晃去。又赶紧把暖手袋扯过来，叫我捧着。</p>
<p>就像小时候那样。</p>
<p>二嫂是看着我长大的。奶奶经常带着我到二嫂家里串门，二嫂家里有糖吃，有奶喝。</p>
<p>那时候我最喜欢翻彻二嫂厚厚的影集，上面有好多我没见过的东西。</p>
<p>奶奶你耳朵边别着的是什么花呀，那时候你几岁。</p>
<p>二嫂说那年她十六，别着的花叫白玉兰。</p>
<p>今年她七十六。照片上的小姑娘带一点自信，含一丝羞赧，就像每个十六七岁的女孩子那样。</p>
<p>这让我想起妈妈。妈妈年轻的时候追邓丽君、小虎队，最喜欢的是粉红色的回忆。家里有一张她结婚时的照片，大红毛衣，傻傻的杵在那里，另一头爸爸给二叔骑在背上，向妈妈鞠躬，胸前歪着一朵大红花。</p>
<p>我没见过作为年轻姑娘的二嫂和妈妈是什么样子的，跟我相关的，只有她们逐渐老去的岁月。</p>
<p>二嫂晃动着身子，她打算站起身来。</p>
<p>我扶着她，走一步，拖一步，不违背，不阻挡。</p>
<p>五六米的距离，老人已经气喘吁吁。我也不说话，我单单陪着她。</p>
<p>院里的枣树上落了一只麻雀，不知为何她没回南方的家。隔壁的二层小楼开始掌起灯火，夜色也正吞下了半边天。</p>
<p>二嫂接着往外拖着步子，这时媳妇却迎着面从小卖部回来。</p>
<p>哎呀，涛你怎么让你奶奶出屋里来了？外面冷，娘咱回屋里吧。</p>
<p>二嫂不肯，但她做不了主。</p>
<p>这已不是她做主的日子了。</p>
<p>爷爷大二嫂好多岁，早就没了精神。多少年大大小小，一直是二嫂操持着。</p>
<p>去年的时候，我坐在炕头边，绕着问她年轻时候的故事。</p>
<p>她说她的一生就分为两部分，给大伙种地和给自己种地。前半段三十年，后半段三十年。</p>
<p>明明从北京赶过来，她却说这里更冷一些。村支书被打得藏在柜子底下，三千斤麦子换来的推车充了公，大雨下到把房子冲塌，夜不闭户，好冷。</p>
<p>二嫂说后来却是倒春寒。家乡的新媳妇，都凑不出一件体面衣裳。地里什么东西也不长。饿死的人排着队。</p>
<p>我问再后来呢？自己种总好些了吧？</p>
<p>二嫂说自己种也要上交粮食给国家的。那年她推着小车，走了二十几里的土路，把麦子送到乡上。三十年了。</p>
<p>二嫂说这么多年看上去一直是我在做主支撑着这个家，但实际上我从来都没做过主，我对自己也做不了主，我对谁也做不了主。</p>
<p>我说还是我们这一代人幸福啊，赶上了好的时候。</p>
<p>二嫂说那只是看起来，长大了你就明白了。</p>
<p>然而我从来都长不大，二嫂却变老了。</p>
<p>二嫂老了，但从没老糊涂，也没装过糊涂，直到突然的疾病将糊涂的能力赐予给她。</p>
<p>回到屋里，二嫂就又安静地坐下来。电视里恰巧是场晚会，在希望的田野上。</p>
<p>夜幕已全然降临。猎户座的三星嵌在南面的而天空，月亮瘦成眉毛，挑在树枝上，除此之外，一片看不透的灰色将视野罩的密不透风。</p>
<p>我瞪着窗外，正出神，二嫂那边却哼了起来，摇起我的手。</p>
<p>呜呜声。奶奶又回到了回不去的小时候。</p>
<p>@<a href="http://ddlee.cn" target="_blank" rel="external">ddlee</a></p>
<p>2017年2月</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[谁会不厌其烦地安慰那无知的少年（一）]]></title>
      <url>http://blog.ddlee.cn/2017/01/27/%E8%B0%81%E4%BC%9A%E4%B8%8D%E5%8E%8C%E5%85%B6%E7%83%A6%E5%9C%B0%E5%AE%89%E6%85%B0%E9%82%A3%E6%97%A0%E7%9F%A5%E7%9A%84%E5%B0%91%E5%B9%B4-1/</url>
      <content type="html"><![CDATA[<blockquote>
<p><em>一个男孩要下过多少电影，才能称得上是一个男人？一只海鸥要飞过多少海洋，才能在柔柔的沙滩上安息？——鲍勃·迪伦，《答案在风中飘荡》</em></p>
</blockquote>
<p>星星眨着眼，银河却不见。万家灯火散落在不遥远的远方，贪婪的夜色吞噬着视野，列车不紧不慢地刺破雾气的深不可测，卧铺床头的小台灯透过车窗温暖出朦胧一片，笼住返乡人的放松与期盼。</p>
<p>其实丁丁差点没赶上火车。亏得遇到老司机，路上没怎么堵。过检票口的时候，广播刚刚喊着“你所乘坐的班次已停止检票”。</p>
<p>火车终于安稳地行着。丁丁的心情也慢慢舒畅起来。</p>
<p>丁丁趴在铺上，翻看相册，回想这又一个人生七年。</p>
<p>小学到中学就是一趟火车，有起点也有终点，不慌不忙。大学是脱了轨的同一趟火车，东栽西撞，没有诗也到不了远方。</p>
<p>想到这里，丁丁下了铺，留意了一下安全锤的位置，然而，在回来时，他还是不可避免地被旁边的大叔注意到了。</p>
<p>嘿，小伙子，你也用Lumia 啊。</p>
<p>丁丁尴尬地讲，没，只是备用机，主力还是安卓。心想着竟然还被看出来了，不过正好，用Lumia不装逼，那跟咸鱼有什么区别。</p>
<p>大叔你做什么工作的呀。</p>
<p>大叔讲他是个半个码农，三倍的房奴，两个孩子的爹地，一个老婆坚实的依靠。</p>
<p>丁丁说自己是三个舍友的爸爸，五门课的开课赞助商，七个女生的备胎，九个社团的划水副总监。</p>
<p>大叔说你这就是我的Pro版啊，深交吗小伙子？</p>
<p>丁丁说，好。</p>
<p>可这一开口，大叔就是从诗词歌赋到人生哲学。只不过，没有雪也没有月亮，我不是紫薇他也不叫尔康。</p>
<p>大叔并不大，现在在南京，江北一套房，鼓楼一套学区。两个儿子，大的刚上一年级，小的还不会撒谎。</p>
<p>自己公司年底出了状况，没能跟家人坐同一趟车回家。</p>
<p>大叔说自己本科数学，毕了业才发现自己卵没什么用。女朋友学计算机，早就找好了工作，自己只好考了研，后来拿了个硕士，主攻信号转发与缓存。</p>
<p>丁丁说我也数学。</p>
<p>大叔抿了抿嘴，嗯，有意思有意思。</p>
<p>大叔说那我给你介绍介绍考研经验吧。</p>
<p>丁丁说好啊好啊。</p>
<p>那年考研的形势很严峻，因为减招。</p>
<p>为了考研，大三那年寒假，我初五就从家里跑出来了。赶巧的是，那年跟今年一样，过年赶得好晚，我统共在家不到十天。</p>
<p>临走那天晚上，爸爸到单位值班，去之前又塞给我几百块钱，说穷家富路，但这种行为被我义正辞严地拒绝了。可爸爸走后，我泪湿眼底。</p>
<p>因为这一离开就又是半年。</p>
<p>考上大学第一年回家，奶奶跟我说你走后你爸来我这儿的时候哭了，说你跟小鸟一样飞走了。我说也是啊，我长大了，爸爸的一个时代也结束了呀，就在我报完到送他回去的那一刻。</p>
<p>那天在楼下值班室那里领钥匙，爸爸在一边摸着头笑，见我回头，他跟遇到喜欢的女生那样不好意思，红着脸。</p>
<p>爸爸的一个时代结束了呀。</p>
<p>还记得，我上小学那会儿，连午休都要家长签字确认的，还有作业也是，爸爸兢兢业业地把题都重新算一遍，马虎的地方狠狠批我一顿，这才用方方正正的钢笔给我签上“家长已检查”，现在我才知道，这叫“背书”。</p>
<p>那时候妈妈在一边儿踩着缝纫机，看点播台的我被爸爸叫过去，扭扭捏捏地摸着后脑勺，阳台上水仙开着，香味儿就飘到屋里来。</p>
<p>其实那时候的我才最懂事儿。那时我最大的梦想就是娶了班上最文静的女生，让妈妈少操点儿心。而她当时就是我的同桌，放学我们还一起走到灵石路的尽头，走过小酒馆的门口。后来四五年级，起了流言，我们就分了。</p>
<p>后来在外面求学，跟父母在一起的时间就越来越少了。那时候我最喜欢的时候是坐在大巴士高高的最后一排，靠窗，看路边的杨树一棵一棵闪过，我觉得我的人生康庄大道就在脚下一点一点伸展开来。</p>
<p>爸爸给我的支持也越来越少了。他不懂遗传平衡定律，找不到辅助线，也人脸识别不了虚拟语气。我的小小心思就像宇宙那般，无边地膨胀起来了。</p>
<p>高考就是碰到气球的那根针。我感觉自己是被发配到了南方，而且还被冻成了狗。</p>
<p>丁丁顺着说，南方确实冷的不行，尤其下雨天。</p>
<p>大叔说，你看，这些小事，我不说，就要一点一点埋葬在潺潺流去的岁月里了。</p>
<p>可我考研那年不懂事。我哭的时候，却觉得自己分分钟像个大人了，我早回去正是在做着那些英雄们不得不做的事儿。天将降大任于斯人矣。</p>
<p>为了呵护这个家，却要离开它。</p>
<p>浊酒一杯，家万里。</p>
<p>我觉得这就是我的燃情岁月。</p>
<p>后来研考上了，女朋友等了我三年，然后就媳妇也有了。后来我才知道燃情岁月才算刚刚开始。</p>
<p>丁丁蛮懂事，道，汪、汪、汪。</p>
<p>再后来，有了一室一厅，吉利帝豪，郊区的三室两厅，又因为堵车把车给卖了，再后来有了一个儿子，鼓楼的学区加户口房，又添了个儿子，就把爸妈接过来了。</p>
<p>这几年没有我特别想做的事儿。只有我需要做好的事儿。</p>
<p>两个小魔王，说实话我不觉得爸妈老年生活有多幸福。</p>
<p>不过多亏通了地铁，我每天八点半能到家，磕个瓜子，跟我爸聊聊我儿子和他儿子。</p>
<p>可是，小伙子，你知道吗？我考研那年，就是个愣头青。</p>
<p>那时候我对私人的时间有着近乎偏执的吝啬。我觉得自己独处的时间才是上天赐予的礼物。回家过年又烦又累，措不及防的应酬是对我神圣的私有时间的侵犯。所以，其实我早早就狠下心来，一定要早早的回学校。</p>
<p>我上车那天风声呼啸，暗云疾行，干燥的北风中赫赫抬起的，是我打车的一只大手。路两边白杨赤条条的，行人裹着衣，绷着脸。</p>
<p>风萧萧兮易水寒，众人向北我向南。</p>
<p>可是，小伙子，你知道吗？</p>
<p>让男孩成为男人的，不是事业，是家业啊。</p>
<p>大叔突然不说了。他翻了个身，晚安。</p>
<p>丁丁也回过头，抹了眼睛，退了返程。</p>
<p>@<a href="http://ddlee.cn" target="_blank" rel="external">ddlee</a></p>
<p>2017年1月</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小米3变身记]]></title>
      <url>http://blog.ddlee.cn/2016/09/23/%E5%B0%8F%E7%B1%B33%E5%8F%98%E8%BA%AB%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Across the Great Wall we can reach every corner in the world.”（越过长城，走向世界）</p>
</blockquote>
<h1 id="1-缘起——我、小米、安卓和Android"><a href="#1-缘起——我、小米、安卓和Android" class="headerlink" title="1.缘起——我、小米、安卓和Android"></a>1.缘起——我、小米、安卓和Android</h1><p>知乎上有个抖机灵的回答，问题是“Nexus 5 如果不使用 VPN，会有什么影响”，回答是“android 体验变成安卓体验”。感谢无所不能的墙，让Android也有了中国特色。</p>
<p>各家应用市场层出不穷，应用推广不择手段，申请权限多多益善，后台活动精彩不断。更不能忍的是，小米移除了Google的服务框架，无法从Play商店推动应用。为了用Sleep Cycle alarm clock, 我得用在线工具从Play商店获取链接，同步到云盘里，再从手机里打开.apk文件来安装。因为，百度搜索出的那个结果，应用中内置了烦人的广告。</p>
<p>终于，我投奔了IOS阵营，手中服役的小米3也就闲置。在一个并没有那么蛋疼的午后，我拿出数据线，对它说，It’s time.</p>
<p>注意：本系列不作为通用教程，只做经历分享。请移步相关论坛获取教程信息。</p>
<h1 id="2-基础——是什么，为什么，怎么办"><a href="#2-基础——是什么，为什么，怎么办" class="headerlink" title="2.基础——是什么，为什么，怎么办"></a>2.基础——是什么，为什么，怎么办</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>你一定听说过，有种技术叫刷机。你也一定听说过，还有种技术叫越狱。你更一定听说过，还有种技术叫FanQiang。</p>
<p>这三者有什么关系呢？</p>
<p>在我看来，它们都关乎我们作为用户常常忽略的两个字——权限。</p>
<p>换言之，我们常常关注可以用手机干什么、可以上网浏览什么，却常常不去注意，我们本来有更多事可以做，有更多信息可以获取。</p>
<p>刷机意味着给手机重装系统，你获得的是选择硬件所运行系统的权利；越狱获得的是掌控某一操作系统的权利；而FanQiang，获得的则是“越过长城，走向世界”的权利。</p>
<blockquote>
<p>中国第一封电子邮件的内容是：Across the Great Wall we can reach every corner in the world.”（越过长城，走向世界）。这是1987年9月14日从北京向海外发出的中国第一封电子邮件，揭开了中国人使用互联网的序幕。</p>
<p>来源：<a href="https://www.zhihu.com/question/32239520/answer/61354926" target="_blank" rel="external">知乎</a></p>
</blockquote>
<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>因为无聊，因为好奇，因为喜欢，因为不满足，因为我们可以。</p>
<h2 id="怎么办"><a href="#怎么办" class="headerlink" title="怎么办"></a>怎么办</h2><p>如果把刷机比作建造楼房，你所需要准备的就是知识（图纸）、刷机包（水泥、混凝土）、调试环境（吊塔）。</p>
<h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><p>真正重要的知识，是关于知识的知识。拿到图纸不重要，重要的是学会如何看懂图纸。以我的经历，最耗费精力的部分不是学习教程，而是TROUBLE SHOOTING, 是如何解决出现的问题。</p>
<p>因此，绝对不要使用某些工具的“一键刷机功能”，它们不会告诉你问题出在哪。<br><img src="/img/Mi3/something-happened.jpg" alt="Something Happened"></p>
<p>请保证你对整个过程的绝对控制，保证你清楚到底在哪一步无法继续进行。</p>
<p>而为了看懂图纸，你需要准备好你的Google.它会是你最可靠的伙伴。</p>
<p>下面是图纸中可能涉及的内容，请搜索并结合某些通用刷机教程理解它们发挥的作用。</p>
<ul>
<li>卡刷、线刷：两种刷机的操作方式（体位）</li>
<li>Root：获取Android系统管理员的过程</li>
<li>OTA：On The Air， 一种系统更新方式</li>
<li>ROM包： 刷入手机ROM的系统软件包</li>
<li>Recovery Mode： Android系统的一种模式，常在此模式下进行刷机操作</li>
<li>Fastboot Mode： Android系统的一种模式，可在此模式下刷入自定义recovery</li>
<li>ADB： Android Debug Bridge，用PC对Android系统进行USB调教所需的环境</li>
<li>CM： 一家著名的ROM制作方，现已改名Lineage OS</li>
<li>Android M： Android系统的一个版本，现在是N（Nougat，7.0）</li>
<li>GApps： Google服务全家桶，需要刷入系统分区，包括Play和GMS等服务</li>
</ul>
<h1 id="3-刷机——大致的步骤，常见的坑"><a href="#3-刷机——大致的步骤，常见的坑" class="headerlink" title="3.刷机——大致的步骤，常见的坑"></a>3.刷机——大致的步骤，常见的坑</h1><h3 id="一个负责任的教程，大概会告诉你如下几个步骤"><a href="#一个负责任的教程，大概会告诉你如下几个步骤" class="headerlink" title="一个负责任的教程，大概会告诉你如下几个步骤"></a>一个负责任的教程，大概会告诉你如下几个步骤</h3><ul>
<li>风险警示</li>
<li>备份数据</li>
<li>如何搭建ADB环境-PC</li>
<li>如何进入fastboot模式-手机</li>
<li>如何在ADB环境下，fastboot模式中刷入自定义recovery</li>
<li>如何利用recovery模式清除数据，刷入ROM包（和Gapps）</li>
<li>如何ROOT</li>
</ul>
<h3 id="一次蛋疼的刷机经历，常常会遇到这些坑"><a href="#一次蛋疼的刷机经历，常常会遇到这些坑" class="headerlink" title="一次蛋疼的刷机经历，常常会遇到这些坑"></a>一次蛋疼的刷机经历，常常会遇到这些坑</h3><ul>
<li>找到正确的Recovery和ROM包：一定要仔细比对型号，尽量选用开源机构制作的包</li>
<li>搭建ADB环境：要用到命令行（请慎重选用一件脚本，即.bat文件）</li>
<li>连接电脑与手机：Windows系统下需要硬件驱动（请注意型号）</li>
<li>……</li>
</ul>
<h1 id="4-资源——与你同行"><a href="#4-资源——与你同行" class="headerlink" title="4.资源——与你同行"></a>4.资源——与你同行</h1><h3 id="论坛与搜索引擎"><a href="#论坛与搜索引擎" class="headerlink" title="论坛与搜索引擎"></a>论坛与搜索引擎</h3><p>你会发现，手机厂商的官方论坛和XDA等论坛会很有帮助。但真正与你同行的，还是Google。</p>
<h3 id="常用网址"><a href="#常用网址" class="headerlink" title="常用网址"></a>常用网址</h3><ul>
<li><a href="https://twrp.me/" target="_blank" rel="external">TWRP，著名的自定义recovery</a></li>
<li><a href="http://opengapps.org/" target="_blank" rel="external">GApps，Google全家桶</a></li>
<li><a href="http://repo.xposed.info/module/de.robv.android.xposed.installer" target="_blank" rel="external">Xposed，著名开源框架</a></li>
<li><a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="external">ADB Guide</a></li>
<li><a href="http://www.supersu.com/download" target="_blank" rel="external">SuperSU，用于手机Root</a></li>
</ul>
<p>@<a href="https://ddlee.cn" target="_blank" rel="external">ddlee</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据分析在线学习资源(Personal Archive)]]></title>
      <url>http://blog.ddlee.cn/2016/08/07/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E8%B5%84%E6%BA%90/</url>
      <content type="html"><![CDATA[<p>数据分析方向的在线资源收集。</p>
<h2 id="1-Some-wonderful-Tutorials"><a href="#1-Some-wonderful-Tutorials" class="headerlink" title="1.Some wonderful Tutorials"></a>1.Some wonderful Tutorials</h2><ol>
<li><a href="https://www.springboard.com/learning-paths/data-analysis/learn/?" target="_blank" rel="external">Data Analysis Learning Path from Springboard</a></li>
<li><a href="http://datasciencemasters.org/" target="_blank" rel="external">The Open Source Data Science Masters</a></li>
</ol>
<h2 id="2-Basic"><a href="#2-Basic" class="headerlink" title="2. Basic"></a>2. Basic</h2><h3 id="2-1-Database"><a href="#2-1-Database" class="headerlink" title="2.1 Database"></a>2.1 Database</h3><p>Stanford’s Database <a href="https://lagunita.stanford.edu/courses/Engineering/db/2014_1/info" target="_blank" rel="external">course</a></p>
<h3 id="2-2-Agrolthms"><a href="#2-2-Agrolthms" class="headerlink" title="2.2 Agrolthms"></a>2.2 Agrolthms</h3><p>Algrothms from Stanford via <a href="https://class.coursera.org/algs4partI-010" target="_blank" rel="external">Coursera</a>(using Java)<br>Booksite <a href="http://algs4.cs.princeton.edu/home/" target="_blank" rel="external">here</a><br>Algorithm with Python in <a href="https://github.com/qiwsir/algorithm" target="_blank" rel="external">GItHub</a></p>
<h3 id="2-3-Algebra"><a href="#2-3-Algebra" class="headerlink" title="2.3 Algebra"></a>2.3 Algebra</h3><p>Harvard’s Massive Parralle Algebra Course on iTunes U</p>
<h3 id="2-4-Statistics"><a href="#2-4-Statistics" class="headerlink" title="2.4 Statistics"></a>2.4 Statistics</h3><p>Princeton’s Statistics One</p>
<h3 id="2-5-Books"><a href="#2-5-Books" class="headerlink" title="2.5 Books"></a>2.5 Books</h3><ul>
<li><em>Pattern Recognition and Machine Learning</em> by Bishop</li>
<li><em>The Elements of Statistical Learning</em></li>
</ul>
<h2 id="3-Python"><a href="#3-Python" class="headerlink" title="3. Python"></a>3. Python</h2><h3 id="3-1-Scipy-amp-Pandas-amp-sklearn"><a href="#3-1-Scipy-amp-Pandas-amp-sklearn" class="headerlink" title="3.1 Scipy &amp; Pandas &amp; sklearn"></a>3.1 Scipy &amp; Pandas &amp; sklearn</h3><ul>
<li>Scipy Lecture Notes</li>
<li>Pandas Doc</li>
<li>Pandas <a href="https://github.com/jvns/pandas-cookbook" target="_blank" rel="external">Cookbook</a></li>
<li>sklearn Doc</li>
</ul>
<h3 id="3-2-Python-MOOCs"><a href="#3-2-Python-MOOCs" class="headerlink" title="3.2 Python MOOCs"></a>3.2 Python MOOCs</h3><h5 id="edX-course"><a href="#edX-course" class="headerlink" title="edX course"></a>edX course</h5><p>MITx: 6.00.2x Introduction to Computational Thinking and Data Science via <a href="https://courses.edx.org/courses/course-v1:MITx+6.00.2x_5+1T2016/info" target="_blank" rel="external">edX</a></p>
<h5 id="Udacity-Course"><a href="#Udacity-Course" class="headerlink" title="Udacity Course"></a>Udacity Course</h5><ul>
<li>Design of Computer Programs with Peter Novig</li>
<li>Intro to Machine Learning (project oriented)</li>
<li>Machine Learning: Unsupervised Learning</li>
</ul>
<h3 id="3-3-Books"><a href="#3-3-Books" class="headerlink" title="3.3 Books"></a>3.3 Books</h3><ul>
<li><em>Python for Data Analysis</em> by Wes McKinney</li>
<li><em>Programming Collective Intelligence</em> by Toby Segaran</li>
</ul>
<h2 id="4-R"><a href="#4-R" class="headerlink" title="4. R"></a>4. R</h2><h3 id="4-1-R-MOOCs"><a href="#4-1-R-MOOCs" class="headerlink" title="4.1 R MOOCs"></a>4.1 R MOOCs</h3><h5 id="edX-course-1"><a href="#edX-course-1" class="headerlink" title="edX course"></a>edX course</h5><p>MIT’s The Analytics Edge</p>
<h5 id="JH-Data-Science-Specilization-via-Coursera"><a href="#JH-Data-Science-Specilization-via-Coursera" class="headerlink" title="JH Data Science Specilization via Coursera"></a>JH Data Science Specilization via Coursera</h5><ul>
<li>Statistical Inference</li>
<li>Regression Model</li>
<li>Practical Machine Learning</li>
<li>Develop Data Science Product</li>
</ul>
<h5 id="Stanford’s-Statistical-Learning"><a href="#Stanford’s-Statistical-Learning" class="headerlink" title="Stanford’s Statistical Learning"></a>Stanford’s Statistical Learning</h5><p><a href="https://lagunita.stanford.edu/courses/HumanitiesSciences/StatLearning/Winter2016/info" target="_blank" rel="external">here</a><br>and its text book <em>An Introduction to Statistical Learning</em> <a href="http://www-bcf.usc.edu/~gareth/ISL/" target="_blank" rel="external">ISLAR</a></p>
<h3 id="4-2-R-Books"><a href="#4-2-R-Books" class="headerlink" title="4.2 R Books"></a>4.2 R Books</h3><ul>
<li><em>R Graphics Cookbook</em> by Winston Chang</li>
<li><em>ggplot2</em> by Hadley Wickham</li>
<li><em>R in Action</em> by Robert I. Kabacoff</li>
</ul>
<h2 id="5-Big-Data"><a href="#5-Big-Data" class="headerlink" title="5. Big Data"></a>5. Big Data</h2><h3 id="5-1-“Big”-MOOCs"><a href="#5-1-“Big”-MOOCs" class="headerlink" title="5.1 “Big” MOOCs"></a>5.1 “Big” MOOCs</h3><h5 id="Udacity-Course-1"><a href="#Udacity-Course-1" class="headerlink" title="Udacity Course"></a>Udacity Course</h5><p>Intro to Hadoop and MapReduce from clourdera</p>
<h5 id="Coursera-Course"><a href="#Coursera-Course" class="headerlink" title="Coursera Course"></a>Coursera Course</h5><p>Mining Massive Datasets</p>
<h5 id="edX-Course"><a href="#edX-Course" class="headerlink" title="edX Course"></a>edX Course</h5><p>Xserise on Spark from BerkleyX</p>
<h2 id="6-Capstone-Project"><a href="#6-Capstone-Project" class="headerlink" title="6. Capstone Project"></a>6. Capstone Project</h2><ul>
<li>SITP Project</li>
<li>Health Twitter Analysis via <a href="https://www.coursolve.org/need/229" target="_blank" rel="external">Coursolve</a></li>
</ul>
<h2 id="7-Additional-Resource"><a href="#7-Additional-Resource" class="headerlink" title="7. Additional Resource"></a>7. Additional Resource</h2><ul>
<li>Harvard’s <a href="http://cs109.github.io/2015/" target="_blank" rel="external">CS109</a> Course: Data Science</li>
<li>Berkley’s <a href="http://cs61a.org/" target="_blank" rel="external">CS61</a>:The Structure and Interpretation of Computer Programs</li>
<li>Probabilistic Graphical Models via <a href="https://www.coursera.org/course/pgm" target="_blank" rel="external">Coursera</a></li>
<li>Berkeley’s <a href="http://data8.org/datascience/" target="_blank" rel="external">Datascience’s Documentation</a></li>
<li><a href="https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks" target="_blank" rel="external">A Gallery of IPython Notebooks</a></li>
<li>A collection of Data Science Learning materials in the form of <a href="https://github.com/nborwankar/LearnDataScience" target="_blank" rel="external">IPython Notebooks</a></li>
<li><a href="http://ufldl.stanford.edu/wiki/index.php/UFLDL_Tutorial" target="_blank" rel="external">Unsupervised Feature Learing and Deep Learning</a></li>
</ul>
<p>@<a href="http://ddlee.cn" target="_blank" rel="external">ddlee</a></p>
]]></content>
      
        <categories>
            
            <category> Data Science </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Data </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个性化你的Ubuntu-3：主题，插件以及桌面小工具]]></title>
      <url>http://blog.ddlee.cn/2016/06/11/%E4%B8%AA%E6%80%A7%E5%8C%96%E4%BD%A0%E7%9A%84Ubuntu-3%EF%BC%9A%E4%B8%BB%E9%A2%98%EF%BC%8C%E6%8F%92%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%A1%8C%E9%9D%A2%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h3 id="个性主题"><a href="#个性主题" class="headerlink" title="个性主题"></a>个性主题</h3><p>依赖于扩展<code>User themes</code>，分为GTK主题，shell主题和icon主题。</p>
<ol>
<li><p>从<a href="https://www.gnome-look.org/browse/cat/134/ord/latest/" target="_blank" rel="external">gnome-look.org</a>下载喜欢的主题（压缩文件）。</p>
</li>
<li><p>将下载的主题文件复制到用户文件夹</p>
<pre><code> cd ~
 mkdir .themes
 cp file_path_to_download_file ~/.themes
</code></pre><p> 并使用<code>unzip</code>或<code>tar xvzf</code>命令解压，或者：</p>
<pre><code> sudo cp file_path_to_download_file /usr/local/themes/
</code></pre></li>
<li><p>在<code>gnome-tweak-tool</code>的扩展<code>User themes</code>中选择主题。</p>
</li>
</ol>
<h5 id="推荐主题"><a href="#推荐主题" class="headerlink" title="推荐主题"></a>推荐主题</h5><p>我使用的是Numix系列的主题<a href="https://numixproject.org/" target="_blank" rel="external">（官网）</a></p>
<ul>
<li><a href="http://satya164.deviantart.com/art/Numix-GTK3-theme-360223962" target="_blank" rel="external">Numix-GTK3 theme</a></li>
<li><a href="http://gnome-look.org/content/show.php/Numix-like+GNOME+Shell+3.16+theme?content=174129" target="_blank" rel="external">Numix-like GNOME Shell theme</a></li>
<li><a href="http://me4oslav.deviantart.com/art/Numix-Circle-Linux-Desktop-Icon-Theme-414741466" target="_blank" rel="external">Numix-Circle Icons</a></li>
</ul>
<p>Numix开发者之一Satyajit Sahoo发布的GNOME shell theme:<br><a href="http://satya164.deviantart.com/art/Gnome-Shell-Elegance-Colors-305966388" target="_blank" rel="external">Gnome Shell - Elegance Colors</a></p>
<p>通过PPA安装</p>
<pre><code>sudo apt-add-repository ppa:numix/ppa
sudo apt-get update
sudo apt-get install numix-gtk-theme
sudo apt-get install numix-icon-theme-circle
</code></pre><pre><code>sudo add-apt-repository ppa:satyajit-happy/themes
sudo apt-get update &amp;&amp; sudo apt-get install gnome-shell-theme-elegance-colors
</code></pre><h2 id="扩展插件"><a href="#扩展插件" class="headerlink" title="扩展插件"></a>扩展插件</h2><p>我当前使用的插件：</p>
<ol>
<li>hide dash：隐藏侧边的favorite栏</li>
<li>Pomotodo：番茄时钟<br><img src="/img/Ubuntu-3/Pomodoro1.jpg" alt="Pomotodo1"><br><img src="/img/Ubuntu-3/Pomodoro2.jpg" alt="Pomotodo2"></li>
<li>（荐）Clipboard indicator：剪贴板切换<br><img src="/img/Ubuntu-3/Selection_018.jpg" alt="Clipboard indicator"></li>
<li>ToDo.txt：待办事项整理<br><img src="/img/Ubuntu-3/ToDo_txt.jpg" alt="ToDo"></li>
<li>Places indicator：文件浏览器的快捷方式</li>
<li>Activities configurator: 当前活动程序管理</li>
<li>Alternatetab: alt-tab桌面切换</li>
<li>Applications menu：类似Windows下开始菜单<br><img src="/img/Ubuntu-3/app.png" alt="Applications"></li>
<li>（荐）Drop down terminal：快捷启动终端<br><img src="/img/Ubuntu-3/drop.png" alt="Drop"></li>
<li>Netspeed：网速监控</li>
<li>Openweather：状态栏天气预报</li>
<li>Removable drive menu：弹出U盘等可移除硬件</li>
<li>（荐）Dynamic top bar：根据窗口颜色变换顶栏颜色</li>
</ol>
<h2 id="其他桌面工具"><a href="#其他桌面工具" class="headerlink" title="其他桌面工具"></a>其他桌面工具</h2><h4 id="DOCK"><a href="#DOCK" class="headerlink" title="DOCK"></a>DOCK</h4><p>推荐<code>Cairo-Dock</code>，效果如图，扩展性很高，自定义程度也很好。</p>
<p><img src="/img/Ubuntu-3/Dock1.jpg" alt="Cairo-Dock"></p>
<h4 id="CONKY：桌面监测工具"><a href="#CONKY：桌面监测工具" class="headerlink" title="CONKY：桌面监测工具"></a>CONKY：桌面监测工具</h4><p>推荐<code>Conky</code>，皮肤也有很多，效果如图。</p>
<p><img src="/img/Ubuntu-3/Conky1.jpg" alt="Conky"></p>
<p>本系列至此完结。欢迎入坑。</p>
<p>@<a href="http://ddlee.cn" target="_blank" rel="external">ddlee</a></p>
<p>2016年6月</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Gnome </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个性化你的Ubuntu-2：GNOME安装与工具]]></title>
      <url>http://blog.ddlee.cn/2016/06/02/%E4%B8%AA%E6%80%A7%E5%8C%96%E4%BD%A0%E7%9A%84Ubuntu-2%EF%BC%9AGNOME%E5%AE%89%E8%A3%85%E4%B8%8E%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h3 id="GNOME安装"><a href="#GNOME安装" class="headerlink" title="GNOME安装"></a>GNOME安装</h3><p>从上一篇文章，大家可以看到，GNOME是一系列软件的集合，安装时可以有不同的取舍。对于Ubuntu用户来说，可以有以下两类体验GNOME的方式。（参考：<a href="https://wiki.ubuntuusers.de/GNOME_Installation/" target="_blank" rel="external">GNOME installation</a>）</p>
<h4 id="1-Ubuntu-GNOME（系统）"><a href="#1-Ubuntu-GNOME（系统）" class="headerlink" title="1.Ubuntu GNOME（系统）"></a>1.Ubuntu GNOME（系统）</h4><p>Ubuntu GNOME是Ubuntu的一个发行版本（也称Ubuntu variants），就像Ubuntu和Fedora等都是GNU/Linux的发行版那样。Ubuntu GNOME不仅包含了Ubuntu的核心部分、GNOME的核心部分，还有一系列的标准应用。</p>
<h5 id="Install-from-DVD"><a href="#Install-from-DVD" class="headerlink" title="Install from DVD"></a>Install from DVD</h5><p>如果可以接受重新安装系统，请到这里<a href="http://ubuntugnome.org/download/" target="_blank" rel="external">下载</a>Ubuntu GNOME。</p>
<h5 id="Install-with-current-system"><a href="#Install-with-current-system" class="headerlink" title="Install with current system"></a>Install with current system</h5><p>你也可以通过安装metapackage，这样在安装GNOME桌面环境时，你的系统中未安装的标准应用也会被同时安装。</p>
<p><code>sudo apt-get install ubuntu-gnome-desktop</code></p>
<h4 id="2-GNOME（仅桌面环境）"><a href="#2-GNOME（仅桌面环境）" class="headerlink" title="2.GNOME（仅桌面环境）"></a>2.GNOME（仅桌面环境）</h4><h5 id="The-“real”-GNOME"><a href="#The-“real”-GNOME" class="headerlink" title="The “real” GNOME"></a>The “real” GNOME</h5><p>标准的GNOME桌面环境，没有Ubuntu的特性（尽管我区分不出哪些是Ubuntu提供的），也不安装附加的标准应用：</p>
<p><code>sudo apt-get install gnome</code></p>
<h5 id="The-minimux-GNOME"><a href="#The-minimux-GNOME" class="headerlink" title="The minimux GNOME"></a>The minimux GNOME</h5><p>GNOME的核心部分，不安装附加的标准应用：</p>
<p><code>sudo apt-get install gnome-core</code></p>
<h5 id="GNOME-shell"><a href="#GNOME-shell" class="headerlink" title="GNOME shell"></a>GNOME shell</h5><p>仅安装GNOME的图形界面：<br><code>sudo apt-get install gnome-shell</code></p>
<p>你还需要：<br><code>sudo apt-get install gnome-session</code></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>在同一系统上安装不同的桌面环境可能会造成一些意料不到的问题（如锁屏界面丢失），最推荐的方案还是重新安装Ubuntu GNOME，其次，可以安装<code>ubuntu-gnome-desktop</code>。</p>
<h4 id="使用新的桌面环境"><a href="#使用新的桌面环境" class="headerlink" title="使用新的桌面环境"></a>使用新的桌面环境</h4><p>安装完毕后，重启，可在登录界面选择桌面环境。</p>
<p><img src="/img/Ubuntu-2/gnome-login1.png" alt="login1"></p>
<p><img src="/img/Ubuntu-2/gnome-login2.png" alt="login2"></p>
<h3 id="GNOME配置工具：gnome-tweak-tool"><a href="#GNOME配置工具：gnome-tweak-tool" class="headerlink" title="GNOME配置工具：gnome-tweak-tool"></a>GNOME配置工具：gnome-tweak-tool</h3><p>想要充分个性化GNOME桌面环境，扩展GNOME的功能，你还需要安装GNOME的配置工具：gnome tweak tool</p>
<p><code>sudo apt-get install gnome-tweak-tool</code></p>
<p><img src="/img/Ubuntu-2/gnome-tweak-tool_004.jpg" alt="图片：gnome tweak tool提供的功能"></p>
<p>利用gnome tweak tool，你可以管理桌面主题、调整窗口特性、调整显示字体、加载GNOME扩展、管理开机自启程序等等。</p>
<h3 id="扩展插件"><a href="#扩展插件" class="headerlink" title="扩展插件"></a>扩展插件</h3><p>在Ubuntu上，要调整桌面主题，可没有Windows上鼠标右击一下那么简单。<br>你要先安装上面的tweak tool，然后有人告诉你需要User theme扩展插件，而你跑到<code>extensions.gnome.org</code>，遇到的却是这个：<br><img src="/img/Ubuntu-2/Selection_019.jpg" alt="错误"></p>
<p>我明明装了GNOME的啊！</p>
<p>这是因为，<code>extensions.gnome.org</code>需要与浏览器通信，调用click-to-play的功能，我们需要安装GNOMNE shell intergration这个插件。</p>
<h4 id="Chrome用户"><a href="#Chrome用户" class="headerlink" title="Chrome用户"></a>Chrome用户</h4><h5 id="利用PPA"><a href="#利用PPA" class="headerlink" title="利用PPA"></a>利用PPA</h5><pre><code>sudo add-apt-repository ppa:ne0sight/chrome-gnome-shell
sudo apt-get update
sudo apt-get install chrome-gnome-shell
</code></pre><h5 id="通过Chrome-Web-Store-GNOME-Shell-integration"><a href="#通过Chrome-Web-Store-GNOME-Shell-integration" class="headerlink" title="通过Chrome Web Store:GNOME Shell integration"></a>通过Chrome Web Store:<a href="https://chrome.google.com/webstore/detail/gnome-shell-integration/gphhapmejobijbbhgpjhcjognlahblep" target="_blank" rel="external">GNOME Shell integration</a></h5><p>可能需要通过CMake安装native connector,请参考这一<a href="https://wiki.gnome.org/Projects/GnomeShellIntegrationForChrome/Installation" target="_blank" rel="external">页面</a>。</p>
<h4 id="FireFox用户"><a href="#FireFox用户" class="headerlink" title="FireFox用户"></a>FireFox用户</h4><p>使用FireFox访问<code>extensions.gnome.org</code>时会有运行GNOME shell integration的通知，允许运行后刷新即可。</p>
<p>更多信息，请参考这一<a href="https://extensions.gnome.org/about/#no-detection" target="_blank" rel="external">页面</a></p>
<p>安装好<code>tweak-tool</code>后，祝贺你已经打开了新世界的大门。下篇文章是关于扩展插件的推荐，欢迎继续阅读。</p>
<p>@<a href="http://ddlee.cn" target="_blank" rel="external">ddlee</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Gnome </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个性化你的Ubuntu-1：GNOME桌面环境]]></title>
      <url>http://blog.ddlee.cn/2016/05/30/%E4%B8%AA%E6%80%A7%E5%8C%96%E4%BD%A0%E7%9A%84Ubuntu-1%EF%BC%9AGNOME%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h2 id="我与Ubuntu"><a href="#我与Ubuntu" class="headerlink" title="我与Ubuntu"></a>我与Ubuntu</h2><p>我最初是Windows98用户，再到Windows2003,Windows XP,Windows 7,上了大学后用Windows 8.1,Windows 10（想不到竟然能列这么长；我从没用过Windows Vista,不知道那是什么东西），我很喜欢8.1和10的开始屏幕和动态磁贴。非常偶然的机会，我在CS50的课程中接触了GNU/Linux，才知道，原来在MS　Windows和Mac OSＸ之外，还有一个GNU/Linux。换完SSD，学会了装操作系统，我便踏上了折腾GNU/Linux的不归路。</p>
<p>曾经被一个软院的同学安利Red Hat系的Fedora（尽管他现在已经投入了MacBook的怀抱）,普及各种内核之类的知识。然而，我只想安静的用它上上网，进行科学计算，并没有深入到考虑系统底层的需求层次。我还是安心地用Ubuntu吧。我也推荐第一次尝试GNU/Linux系统的小白从Ubuntu开始，相信我,askubuntu.com和stackoverflow.com会解决你的大部分问题的。</p>
<h2 id="个性化你的Ubuntu（一）：GNOME桌面环境"><a href="#个性化你的Ubuntu（一）：GNOME桌面环境" class="headerlink" title="个性化你的Ubuntu（一）：GNOME桌面环境"></a>个性化你的Ubuntu（一）：GNOME桌面环境</h2><p>相信不少读者都是从Microsoft Windows转到GNU/Linux阵营的,早就习惯了用户图形界面。但是，配合桌面环境、主题和一些插件和软件，Ubuntu照样可以很酷炫。</p>
<h3 id="什么是GNOME"><a href="#什么是GNOME" class="headerlink" title="什么是GNOME"></a>什么是GNOME</h3><p><img src="/img/Ubuntu-1/Gnomelogo.png" alt="GNOME Logo"><br>（大脚丫为什么这么大。。。）</p>
<p>GNOME(pronounced /ɡˈnoʊm/ or /ˈnoʊm/) 最初是GNU Network Object Model Environment的缩写，但这一缩写已不再沿用（更多历史情况请参见<a href="https://mail.gnome.org/archives/marketing-list/2010-April/msg00050.html" target="_blank" rel="external">这里</a>）。</p>
<p>我们所说的GNOME，通常指的是由<a href="https://www.gnome.org/about/" target="_blank" rel="external">The GNOME Project</a>开发的运行于Linux之上的桌面环境。</p>
<p>我们每天面对的，并不是全部的Microft Windows/OS X/Linux系统，而是系统提供给我们的人机接口，而桌面环境，则是统一在同一图形用户接口（GUI）之下的一揽子软件（X Window Manager, File manager, Terminal emulator, Text editor, Image viewer, E-mail client等）。</p>
<p><img src="/img/Ubuntu-1/OS&amp;GUI.jpg" alt="操作系统提供用户图形界面给用户作为人机接口"><br><a href="http://www.slideshare.net/sherif_mosa/operating-systems-basics-26277922" target="_blank" rel="external">来源</a></p>
<p>Ubuntu自带的桌面环境是<a href="https://unity.ubuntu.com/" target="_blank" rel="external">Unity</a>（图形外壳）,其他流行的桌面环境还有<a href="http://www.kde.org/" target="_blank" rel="external">KDE</a>,<a href="http://www.xfce.org/" target="_blank" rel="external">Xfce</a>。但我们要谈的是GNOME。</p>
<h3 id="什么是X-window-system"><a href="#什么是X-window-system" class="headerlink" title="什么是X window system"></a>什么是X window system</h3><p>要谈Unix-like系统上的图形界面，就不得不提X Window System。那么，什么是X?</p>
<blockquote>
<p>The X Window System, commonly referred to merely as X, is a highly configurable, cross-platform, complete and free client-server system for managing graphical user interfaces (GUIs) on single computers and on networks of computers.</p>
<p>(X窗口系统，通常简称为X，是用于管理在单个计算机和计算机网络上运行的图形用户界面（GUI）一个高度可配置的，跨平台，完整的，自由的客户端-服务器系统。）</p>
<p>来源：<a href="http://www.linfo.org/x.html" target="_blank" rel="external">LINFO</a></p>
</blockquote>
<p>我们试着通过X能够干什么来理解一下这句话。</p>
<p>X是一组规则、一套方法。它提供了从硬件（键鼠）接受用户输入、创建图形窗口、画出直线、位图等基本的图形功能（图形引擎）。</p>
<p>X实现了客户端-服务器的机制。通过划分Server和Client，X既能在本地计算机上运行，也能在计算计算机网络中运行。</p>
<p>X与操作系统独立。X可以理解为运行在操作系统之上的一套软件。如果不需要GUI，完全可以不用安装X。而在Microsoft Windows和OS X中，图形引擎是操作系统的一部分。</p>
<p>X Window System的结构如图。<br><img src="/img/Ubuntu-1/X-window-system.png" alt="X Window System"></p>
<h3 id="GNOME-amp-X"><a href="#GNOME-amp-X" class="headerlink" title="GNOME &amp; X"></a>GNOME &amp; X</h3><p>GNOME和X Window System是什么关系？<br>桌面环境可以理解为一系列X client的集合，其中最重要的组件是X Window Manager。由于X Window System的client-server机制，各client之间是相对独立的，这时，需要一个特殊的client管理其他client，将他们统一在一个框架之下，这就是X Window Manager。<br><img src="/img/Ubuntu-1/Window_Manager.png" alt="Window Manager"><br><a href="http://www.slideshare.net/RBandes/x-window-system" target="_blank" rel="external">来源</a></p>
<p>而GNOME另一个重要的组成部分是GNOME shell，它是一个图形外壳程序，也就是我们要面对的接口。</p>
<p>跟GNOME相关的其他组件、库、概念</p>
<ul>
<li>GTK+：GIMP Widget toolkits，GNOME基于的<a href="https://en.wikipedia.org/wiki/Widget_toolkit" target="_blank" rel="external">GUI工具箱</a>。KDE则基于Qt。</li>
<li>Display Manager:图形用户登陆管理器，为用户提供登陆界面，与session manager通信，开启新的session。GNOME使用的是GDM。</li>
<li>Metacity：GNOME 2使用的window manager，GNOME 3使用的是Mutter。KDE使用的是KWin。</li>
<li>Wayland:与X Window System对应，也是一种窗口系统</li>
</ul>
<h3 id="我现在的桌面"><a href="#我现在的桌面" class="headerlink" title="我现在的桌面"></a>我现在的桌面</h3><p><img src="/img/Ubuntu-1/Gnome1.jpg" alt="我的桌面"></p>
<p>我不喜欢双击桌面图标来启动程序，更多用的是Dock和全局搜索，所以，桌面上“什么都没有”。</p>
<p>桌面的壁纸是电影 <em>飞屋环游记</em> 的海报，使用了Numix系列的主题和图标。</p>
<p>下方Dock使用的程序是Cairo-Dock，桌面右方运行的程序是Conky，用来监测系统运行情况和提供天气信息，上方的Topbar里添加了许多GNOME的扩展应用。</p>
<p>接下来的两篇文章将介绍Gnome的安装与扩展推荐，欢迎继续阅读，撒花。</p>
<p>@<a href="http://ddlee.cn" target="_blank" rel="external">ddlee</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Gnome </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
